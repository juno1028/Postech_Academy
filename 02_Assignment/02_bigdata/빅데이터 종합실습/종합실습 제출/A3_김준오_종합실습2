{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 분석배경\n",
    ": OO공장의 고객사에서 최근 들어 \"Scale 불량 발생 증가\"라는 이슈가 발생했다. 그 원인을 분석해 본 결과 압연공정에서 Scale불량이 급증한 것을 확인할 수 있었다. 그래서 데이터를 수집하여 다양한 분석을 통해 불량 발생의 근본 원인을 찾고 결과를 해석하여 개선 기회를 도출한다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 잠재적인 인자 선정\n",
    "\n",
    "* Scale 발생 : `없음 - 발생`\n",
    "    1. 가열로 가열대 온도(FUR_HZ_TEMP) : `저 - 고`\n",
    "    2. 가열로 균열대 온도(FUR_SZ_TEMP) : `저 - 고`\n",
    "    3. 가열로 추출 온도(FUR_EXTEMP) : `저 - 고`\n",
    "    4. Hot Scale Breaker(HSB) : `적용 - 미적용`\n",
    "    5. 사상 압연 온도(ROLLING_TEMP_T5) : `저 - 고`\n",
    "    6. 압연간 Descaling 횟수(ROLLING_DESCALING) : `증가 - 감소`\n",
    "    7. 판두께(PT_THICK) : `후 - 박`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "\n",
    "import seaborn as sns\n",
    "\n",
    "matplotlib.rc(\"font\", family=\"Noto Sans CJK JP\")\n",
    "# matplotlib.rc(\"font\", family=\"NanumGothic\")\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 데이터 불러오기 및 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PLATE_NO</th>\n",
       "      <th>ROLLING_DATE</th>\n",
       "      <th>SCALE</th>\n",
       "      <th>SPEC</th>\n",
       "      <th>STEEL_KIND</th>\n",
       "      <th>PT_THK</th>\n",
       "      <th>PT_WDTH</th>\n",
       "      <th>PT_LTH</th>\n",
       "      <th>PT_WGT</th>\n",
       "      <th>FUR_NO</th>\n",
       "      <th>...</th>\n",
       "      <th>FUR_HZ_TEMP</th>\n",
       "      <th>FUR_HZ_TIME</th>\n",
       "      <th>FUR_SZ_TEMP</th>\n",
       "      <th>FUR_SZ_TIME</th>\n",
       "      <th>FUR_TIME</th>\n",
       "      <th>FUR_EXTEMP</th>\n",
       "      <th>ROLLING_TEMP_T5</th>\n",
       "      <th>HSB</th>\n",
       "      <th>ROLLING_DESCALING</th>\n",
       "      <th>WORK_GR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PB562774</td>\n",
       "      <td>2008-08-01:00:00:15</td>\n",
       "      <td>양품</td>\n",
       "      <td>AB/EH32-TM</td>\n",
       "      <td>T1</td>\n",
       "      <td>32.25</td>\n",
       "      <td>3707</td>\n",
       "      <td>15109</td>\n",
       "      <td>14180</td>\n",
       "      <td>1호기</td>\n",
       "      <td>...</td>\n",
       "      <td>1144</td>\n",
       "      <td>116</td>\n",
       "      <td>1133</td>\n",
       "      <td>59</td>\n",
       "      <td>282</td>\n",
       "      <td>1133</td>\n",
       "      <td>934</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PB562775</td>\n",
       "      <td>2008-08-01:00:00:16</td>\n",
       "      <td>양품</td>\n",
       "      <td>AB/EH32-TM</td>\n",
       "      <td>T1</td>\n",
       "      <td>32.25</td>\n",
       "      <td>3707</td>\n",
       "      <td>15109</td>\n",
       "      <td>14180</td>\n",
       "      <td>1호기</td>\n",
       "      <td>...</td>\n",
       "      <td>1144</td>\n",
       "      <td>122</td>\n",
       "      <td>1135</td>\n",
       "      <td>53</td>\n",
       "      <td>283</td>\n",
       "      <td>1135</td>\n",
       "      <td>937</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PB562776</td>\n",
       "      <td>2008-08-01:00:00:59</td>\n",
       "      <td>양품</td>\n",
       "      <td>NV-E36-TM</td>\n",
       "      <td>T8</td>\n",
       "      <td>33.27</td>\n",
       "      <td>3619</td>\n",
       "      <td>19181</td>\n",
       "      <td>18130</td>\n",
       "      <td>2호기</td>\n",
       "      <td>...</td>\n",
       "      <td>1129</td>\n",
       "      <td>116</td>\n",
       "      <td>1121</td>\n",
       "      <td>55</td>\n",
       "      <td>282</td>\n",
       "      <td>1121</td>\n",
       "      <td>889</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>3조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PB562777</td>\n",
       "      <td>2008-08-01:00:01:24</td>\n",
       "      <td>양품</td>\n",
       "      <td>NV-E36-TM</td>\n",
       "      <td>T8</td>\n",
       "      <td>33.27</td>\n",
       "      <td>3619</td>\n",
       "      <td>19181</td>\n",
       "      <td>18130</td>\n",
       "      <td>2호기</td>\n",
       "      <td>...</td>\n",
       "      <td>1152</td>\n",
       "      <td>125</td>\n",
       "      <td>1127</td>\n",
       "      <td>68</td>\n",
       "      <td>316</td>\n",
       "      <td>1127</td>\n",
       "      <td>885</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>3조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PB562778</td>\n",
       "      <td>2008-08-01:00:01:44</td>\n",
       "      <td>양품</td>\n",
       "      <td>BV-EH36-TM</td>\n",
       "      <td>T8</td>\n",
       "      <td>38.33</td>\n",
       "      <td>3098</td>\n",
       "      <td>13334</td>\n",
       "      <td>12430</td>\n",
       "      <td>3호기</td>\n",
       "      <td>...</td>\n",
       "      <td>1140</td>\n",
       "      <td>134</td>\n",
       "      <td>1128</td>\n",
       "      <td>48</td>\n",
       "      <td>314</td>\n",
       "      <td>1128</td>\n",
       "      <td>873</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>1조</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   PLATE_NO         ROLLING_DATE SCALE        SPEC STEEL_KIND  PT_THK  \\\n",
       "0  PB562774  2008-08-01:00:00:15    양품  AB/EH32-TM         T1   32.25   \n",
       "1  PB562775  2008-08-01:00:00:16    양품  AB/EH32-TM         T1   32.25   \n",
       "2  PB562776  2008-08-01:00:00:59    양품   NV-E36-TM         T8   33.27   \n",
       "3  PB562777  2008-08-01:00:01:24    양품   NV-E36-TM         T8   33.27   \n",
       "4  PB562778  2008-08-01:00:01:44    양품  BV-EH36-TM         T8   38.33   \n",
       "\n",
       "   PT_WDTH  PT_LTH  PT_WGT FUR_NO  ...  FUR_HZ_TEMP  FUR_HZ_TIME  FUR_SZ_TEMP  \\\n",
       "0     3707   15109   14180    1호기  ...         1144          116         1133   \n",
       "1     3707   15109   14180    1호기  ...         1144          122         1135   \n",
       "2     3619   19181   18130    2호기  ...         1129          116         1121   \n",
       "3     3619   19181   18130    2호기  ...         1152          125         1127   \n",
       "4     3098   13334   12430    3호기  ...         1140          134         1128   \n",
       "\n",
       "   FUR_SZ_TIME  FUR_TIME  FUR_EXTEMP  ROLLING_TEMP_T5  HSB ROLLING_DESCALING  \\\n",
       "0           59       282        1133              934   적용                 8   \n",
       "1           53       283        1135              937   적용                 8   \n",
       "2           55       282        1121              889   적용                 8   \n",
       "3           68       316        1127              885   적용                 8   \n",
       "4           48       314        1128              873   적용                 8   \n",
       "\n",
       "   WORK_GR  \n",
       "0       2조  \n",
       "1       2조  \n",
       "2       3조  \n",
       "3       3조  \n",
       "4       1조  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw = pd.read_csv(\"/home/piai/test/Practice/data/SCALE불량.csv\", engine=\"python\",encoding=\"EUC-KR\")\n",
    "# df_raw = pd.read_csv(\"~/Desktop/coding/postech/Postech_Academy/Practice/data/SCALE불량.csv\", engine=\"python\",encoding=\"EUC-KR\")\n",
    "df_raw.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# \"PLATE_NO\", \"ROLLING_DATE\"는 데이터 분석을 할 때, 사용하지 않을 예정이므로 설명변수를 제거한다.\n",
    "df_raw = df_raw.drop([\"PLATE_NO\",\"ROLLING_DATE\"],axis=1, inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SCALE                0\n",
       "SPEC                 0\n",
       "STEEL_KIND           0\n",
       "PT_THK               0\n",
       "PT_WDTH              0\n",
       "PT_LTH               0\n",
       "PT_WGT               0\n",
       "FUR_NO               0\n",
       "FUR_NO_ROW           0\n",
       "FUR_HZ_TEMP          0\n",
       "FUR_HZ_TIME          0\n",
       "FUR_SZ_TEMP          0\n",
       "FUR_SZ_TIME          0\n",
       "FUR_TIME             0\n",
       "FUR_EXTEMP           0\n",
       "ROLLING_TEMP_T5      0\n",
       "HSB                  0\n",
       "ROLLING_DESCALING    0\n",
       "WORK_GR              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#결측지 확인\n",
    "df_raw.isnull().sum(axis=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ": 결측치가 없는 것을 확인할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 720 entries, 0 to 719\n",
      "Data columns (total 19 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   SCALE              720 non-null    object \n",
      " 1   SPEC               720 non-null    object \n",
      " 2   STEEL_KIND         720 non-null    object \n",
      " 3   PT_THK             720 non-null    float64\n",
      " 4   PT_WDTH            720 non-null    int64  \n",
      " 5   PT_LTH             720 non-null    int64  \n",
      " 6   PT_WGT             720 non-null    int64  \n",
      " 7   FUR_NO             720 non-null    object \n",
      " 8   FUR_NO_ROW         720 non-null    int64  \n",
      " 9   FUR_HZ_TEMP        720 non-null    int64  \n",
      " 10  FUR_HZ_TIME        720 non-null    int64  \n",
      " 11  FUR_SZ_TEMP        720 non-null    int64  \n",
      " 12  FUR_SZ_TIME        720 non-null    int64  \n",
      " 13  FUR_TIME           720 non-null    int64  \n",
      " 14  FUR_EXTEMP         720 non-null    int64  \n",
      " 15  ROLLING_TEMP_T5    720 non-null    int64  \n",
      " 16  HSB                720 non-null    object \n",
      " 17  ROLLING_DESCALING  720 non-null    int64  \n",
      " 18  WORK_GR            720 non-null    object \n",
      "dtypes: float64(1), int64(12), object(6)\n",
      "memory usage: 107.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df_raw.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ": Dtype이 object인데, int 형으로 되어있는 자료형이 있다. 이는 이후 데이터 전처리 과정에서 처리할 예정이다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "66"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(list(df_raw[\"SPEC\"].unique()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ": 66 종류의 제품 규격이 존재한다.(너무 많은 카테고리는 분류 알고리즘에 방해가 될 수 있으므로 삭제하는 것을 고려해야한다.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. 탐색적 기법"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 그래프"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fun_plot_hist(data, var):\n",
    "    plt.hist(data[data[\"SCALE\"] == \"양품\"][var], label = \"양품\", alpha = 0.5)\n",
    "    plt.hist(data[data[\"SCALE\"] == \"불량\"][var], label = \"불량\", alpha = 0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fun_print_crosstab(data, var):\n",
    "    print(pd.crosstab(index = data[\"SCALE\"], columns = data[var]))\n",
    "    print()\n",
    "    print(pd.crosstab(index = data[\"SCALE\"], columns = data[var], normalize = \"columns\").round(3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1.1 연속형 변수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    0\n",
       "3    0\n",
       "4    0\n",
       "Name: SCALE, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw['SCALE'] = np.where(df_raw['SCALE'] == '양품', 0 ,1 )\n",
    "df_raw['SCALE'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(720, 14)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw_numeric = df_raw.select_dtypes(exclude = 'object')\n",
    "df_raw_numeric.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_raw_numeric_x = df_raw_numeric.drop(\"SCALE\", axis = 1, inplace=False)\n",
    "df_raw_numeric_y = df_raw_numeric[\"SCALE\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x3600 with 13 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "i = 0\n",
    "fig = plt.figure(figsize = (15, 50))\n",
    "columns = df_raw_numeric_x.columns\n",
    "for col in columns:\n",
    "    plt.subplot(df_raw_numeric_x.shape[1], 3, i+1)\n",
    "    i += 1\n",
    "    plt.hist(df_raw[df_raw[\"SCALE\"] == 0][col], label = \"양품\", alpha = 0.5)\n",
    "    plt.hist(df_raw[df_raw[\"SCALE\"] == 1][col], label = \"불량\", alpha = 0.5)\n",
    "    plt.xlabel(col)\n",
    "    plt.ylabel(\"SCALE\")\n",
    "    plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SCALE</th>\n",
       "      <th>SPEC</th>\n",
       "      <th>STEEL_KIND</th>\n",
       "      <th>PT_THK</th>\n",
       "      <th>PT_WDTH</th>\n",
       "      <th>PT_LTH</th>\n",
       "      <th>PT_WGT</th>\n",
       "      <th>FUR_NO</th>\n",
       "      <th>FUR_NO_ROW</th>\n",
       "      <th>FUR_HZ_TEMP</th>\n",
       "      <th>FUR_HZ_TIME</th>\n",
       "      <th>FUR_SZ_TEMP</th>\n",
       "      <th>FUR_SZ_TIME</th>\n",
       "      <th>FUR_TIME</th>\n",
       "      <th>FUR_EXTEMP</th>\n",
       "      <th>ROLLING_TEMP_T5</th>\n",
       "      <th>HSB</th>\n",
       "      <th>ROLLING_DESCALING</th>\n",
       "      <th>WORK_GR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>0</td>\n",
       "      <td>GL-E36-TM</td>\n",
       "      <td>T8</td>\n",
       "      <td>55.51</td>\n",
       "      <td>3765</td>\n",
       "      <td>11398</td>\n",
       "      <td>37400</td>\n",
       "      <td>3호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1132</td>\n",
       "      <td>95</td>\n",
       "      <td>1128</td>\n",
       "      <td>80</td>\n",
       "      <td>341</td>\n",
       "      <td>1128</td>\n",
       "      <td>0</td>\n",
       "      <td>적용</td>\n",
       "      <td>6</td>\n",
       "      <td>1조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>0</td>\n",
       "      <td>JS-SM490YB</td>\n",
       "      <td>C0</td>\n",
       "      <td>16.09</td>\n",
       "      <td>2221</td>\n",
       "      <td>43596</td>\n",
       "      <td>61150</td>\n",
       "      <td>3호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1169</td>\n",
       "      <td>64</td>\n",
       "      <td>1164</td>\n",
       "      <td>61</td>\n",
       "      <td>308</td>\n",
       "      <td>1164</td>\n",
       "      <td>0</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>3조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>0</td>\n",
       "      <td>JS-SM490YB</td>\n",
       "      <td>C0</td>\n",
       "      <td>16.09</td>\n",
       "      <td>2221</td>\n",
       "      <td>43596</td>\n",
       "      <td>61150</td>\n",
       "      <td>3호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1163</td>\n",
       "      <td>57</td>\n",
       "      <td>1166</td>\n",
       "      <td>67</td>\n",
       "      <td>303</td>\n",
       "      <td>1166</td>\n",
       "      <td>0</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>4조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>494</th>\n",
       "      <td>0</td>\n",
       "      <td>PILAC-BT33</td>\n",
       "      <td>T5</td>\n",
       "      <td>80.82</td>\n",
       "      <td>2085</td>\n",
       "      <td>12919</td>\n",
       "      <td>17090</td>\n",
       "      <td>2호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1133</td>\n",
       "      <td>89</td>\n",
       "      <td>1122</td>\n",
       "      <td>59</td>\n",
       "      <td>378</td>\n",
       "      <td>1122</td>\n",
       "      <td>0</td>\n",
       "      <td>적용</td>\n",
       "      <td>6</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>495</th>\n",
       "      <td>0</td>\n",
       "      <td>PILAC-BT33</td>\n",
       "      <td>T5</td>\n",
       "      <td>80.82</td>\n",
       "      <td>2085</td>\n",
       "      <td>13176</td>\n",
       "      <td>17430</td>\n",
       "      <td>1호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1130</td>\n",
       "      <td>92</td>\n",
       "      <td>1124</td>\n",
       "      <td>61</td>\n",
       "      <td>362</td>\n",
       "      <td>1124</td>\n",
       "      <td>0</td>\n",
       "      <td>적용</td>\n",
       "      <td>6</td>\n",
       "      <td>3조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>496</th>\n",
       "      <td>0</td>\n",
       "      <td>NV-D32-TM</td>\n",
       "      <td>T0</td>\n",
       "      <td>40.35</td>\n",
       "      <td>2497</td>\n",
       "      <td>23592</td>\n",
       "      <td>37320</td>\n",
       "      <td>3호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1119</td>\n",
       "      <td>109</td>\n",
       "      <td>1117</td>\n",
       "      <td>76</td>\n",
       "      <td>383</td>\n",
       "      <td>1117</td>\n",
       "      <td>0</td>\n",
       "      <td>적용</td>\n",
       "      <td>6</td>\n",
       "      <td>3조</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     SCALE        SPEC STEEL_KIND  PT_THK  PT_WDTH  PT_LTH  PT_WGT FUR_NO  \\\n",
       "41       0   GL-E36-TM         T8   55.51     3765   11398   37400    3호기   \n",
       "184      0  JS-SM490YB         C0   16.09     2221   43596   61150    3호기   \n",
       "185      0  JS-SM490YB         C0   16.09     2221   43596   61150    3호기   \n",
       "494      0  PILAC-BT33         T5   80.82     2085   12919   17090    2호기   \n",
       "495      0  PILAC-BT33         T5   80.82     2085   13176   17430    1호기   \n",
       "496      0   NV-D32-TM         T0   40.35     2497   23592   37320    3호기   \n",
       "\n",
       "     FUR_NO_ROW  FUR_HZ_TEMP  FUR_HZ_TIME  FUR_SZ_TEMP  FUR_SZ_TIME  FUR_TIME  \\\n",
       "41            2         1132           95         1128           80       341   \n",
       "184           1         1169           64         1164           61       308   \n",
       "185           2         1163           57         1166           67       303   \n",
       "494           1         1133           89         1122           59       378   \n",
       "495           2         1130           92         1124           61       362   \n",
       "496           1         1119          109         1117           76       383   \n",
       "\n",
       "     FUR_EXTEMP  ROLLING_TEMP_T5 HSB  ROLLING_DESCALING WORK_GR  \n",
       "41         1128                0  적용                  6      1조  \n",
       "184        1164                0  적용                 10      3조  \n",
       "185        1166                0  적용                 10      4조  \n",
       "494        1122                0  적용                  6      2조  \n",
       "495        1124                0  적용                  6      3조  \n",
       "496        1117                0  적용                  6      3조  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 이상치 제거\n",
    "df_raw[df_raw[\"ROLLING_TEMP_T5\"]<200]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SCALE</th>\n",
       "      <th>SPEC</th>\n",
       "      <th>STEEL_KIND</th>\n",
       "      <th>PT_THK</th>\n",
       "      <th>PT_WDTH</th>\n",
       "      <th>PT_LTH</th>\n",
       "      <th>PT_WGT</th>\n",
       "      <th>FUR_NO</th>\n",
       "      <th>FUR_NO_ROW</th>\n",
       "      <th>FUR_HZ_TEMP</th>\n",
       "      <th>FUR_HZ_TIME</th>\n",
       "      <th>FUR_SZ_TEMP</th>\n",
       "      <th>FUR_SZ_TIME</th>\n",
       "      <th>FUR_TIME</th>\n",
       "      <th>FUR_EXTEMP</th>\n",
       "      <th>ROLLING_TEMP_T5</th>\n",
       "      <th>HSB</th>\n",
       "      <th>ROLLING_DESCALING</th>\n",
       "      <th>WORK_GR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>AB/EH32-TM</td>\n",
       "      <td>T1</td>\n",
       "      <td>32.25</td>\n",
       "      <td>3707</td>\n",
       "      <td>15109</td>\n",
       "      <td>14180</td>\n",
       "      <td>1호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1144</td>\n",
       "      <td>116</td>\n",
       "      <td>1133</td>\n",
       "      <td>59</td>\n",
       "      <td>282</td>\n",
       "      <td>1133</td>\n",
       "      <td>934</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>AB/EH32-TM</td>\n",
       "      <td>T1</td>\n",
       "      <td>32.25</td>\n",
       "      <td>3707</td>\n",
       "      <td>15109</td>\n",
       "      <td>14180</td>\n",
       "      <td>1호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1144</td>\n",
       "      <td>122</td>\n",
       "      <td>1135</td>\n",
       "      <td>53</td>\n",
       "      <td>283</td>\n",
       "      <td>1135</td>\n",
       "      <td>937</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>NV-E36-TM</td>\n",
       "      <td>T8</td>\n",
       "      <td>33.27</td>\n",
       "      <td>3619</td>\n",
       "      <td>19181</td>\n",
       "      <td>18130</td>\n",
       "      <td>2호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1129</td>\n",
       "      <td>116</td>\n",
       "      <td>1121</td>\n",
       "      <td>55</td>\n",
       "      <td>282</td>\n",
       "      <td>1121</td>\n",
       "      <td>889</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>3조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>NV-E36-TM</td>\n",
       "      <td>T8</td>\n",
       "      <td>33.27</td>\n",
       "      <td>3619</td>\n",
       "      <td>19181</td>\n",
       "      <td>18130</td>\n",
       "      <td>2호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1152</td>\n",
       "      <td>125</td>\n",
       "      <td>1127</td>\n",
       "      <td>68</td>\n",
       "      <td>316</td>\n",
       "      <td>1127</td>\n",
       "      <td>885</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>3조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>BV-EH36-TM</td>\n",
       "      <td>T8</td>\n",
       "      <td>38.33</td>\n",
       "      <td>3098</td>\n",
       "      <td>13334</td>\n",
       "      <td>12430</td>\n",
       "      <td>3호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1140</td>\n",
       "      <td>134</td>\n",
       "      <td>1128</td>\n",
       "      <td>48</td>\n",
       "      <td>314</td>\n",
       "      <td>1128</td>\n",
       "      <td>873</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>1조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>709</th>\n",
       "      <td>1</td>\n",
       "      <td>NK-KA</td>\n",
       "      <td>C0</td>\n",
       "      <td>20.14</td>\n",
       "      <td>3580</td>\n",
       "      <td>38639</td>\n",
       "      <td>21870</td>\n",
       "      <td>3호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1172</td>\n",
       "      <td>72</td>\n",
       "      <td>1164</td>\n",
       "      <td>62</td>\n",
       "      <td>245</td>\n",
       "      <td>1164</td>\n",
       "      <td>1005</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>710</th>\n",
       "      <td>0</td>\n",
       "      <td>NV-A32</td>\n",
       "      <td>C0</td>\n",
       "      <td>15.08</td>\n",
       "      <td>3212</td>\n",
       "      <td>48233</td>\n",
       "      <td>18340</td>\n",
       "      <td>2호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1150</td>\n",
       "      <td>61</td>\n",
       "      <td>1169</td>\n",
       "      <td>61</td>\n",
       "      <td>238</td>\n",
       "      <td>1169</td>\n",
       "      <td>947</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>1조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>711</th>\n",
       "      <td>0</td>\n",
       "      <td>NV-A32</td>\n",
       "      <td>C0</td>\n",
       "      <td>16.60</td>\n",
       "      <td>3441</td>\n",
       "      <td>43688</td>\n",
       "      <td>19590</td>\n",
       "      <td>2호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1169</td>\n",
       "      <td>65</td>\n",
       "      <td>1163</td>\n",
       "      <td>77</td>\n",
       "      <td>247</td>\n",
       "      <td>1163</td>\n",
       "      <td>948</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>4조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>712</th>\n",
       "      <td>0</td>\n",
       "      <td>LR-A</td>\n",
       "      <td>C0</td>\n",
       "      <td>15.59</td>\n",
       "      <td>3363</td>\n",
       "      <td>48740</td>\n",
       "      <td>80240</td>\n",
       "      <td>3호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1179</td>\n",
       "      <td>86</td>\n",
       "      <td>1163</td>\n",
       "      <td>45</td>\n",
       "      <td>243</td>\n",
       "      <td>1163</td>\n",
       "      <td>940</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>713</th>\n",
       "      <td>0</td>\n",
       "      <td>GL-A32</td>\n",
       "      <td>C0</td>\n",
       "      <td>16.09</td>\n",
       "      <td>3400</td>\n",
       "      <td>54209</td>\n",
       "      <td>69840</td>\n",
       "      <td>3호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>82</td>\n",
       "      <td>1169</td>\n",
       "      <td>45</td>\n",
       "      <td>239</td>\n",
       "      <td>1169</td>\n",
       "      <td>957</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>714 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     SCALE        SPEC STEEL_KIND  PT_THK  PT_WDTH  PT_LTH  PT_WGT FUR_NO  \\\n",
       "0        0  AB/EH32-TM         T1   32.25     3707   15109   14180    1호기   \n",
       "1        0  AB/EH32-TM         T1   32.25     3707   15109   14180    1호기   \n",
       "2        0   NV-E36-TM         T8   33.27     3619   19181   18130    2호기   \n",
       "3        0   NV-E36-TM         T8   33.27     3619   19181   18130    2호기   \n",
       "4        0  BV-EH36-TM         T8   38.33     3098   13334   12430    3호기   \n",
       "..     ...         ...        ...     ...      ...     ...     ...    ...   \n",
       "709      1       NK-KA         C0   20.14     3580   38639   21870    3호기   \n",
       "710      0      NV-A32         C0   15.08     3212   48233   18340    2호기   \n",
       "711      0      NV-A32         C0   16.60     3441   43688   19590    2호기   \n",
       "712      0        LR-A         C0   15.59     3363   48740   80240    3호기   \n",
       "713      0      GL-A32         C0   16.09     3400   54209   69840    3호기   \n",
       "\n",
       "     FUR_NO_ROW  FUR_HZ_TEMP  FUR_HZ_TIME  FUR_SZ_TEMP  FUR_SZ_TIME  FUR_TIME  \\\n",
       "0             1         1144          116         1133           59       282   \n",
       "1             2         1144          122         1135           53       283   \n",
       "2             1         1129          116         1121           55       282   \n",
       "3             2         1152          125         1127           68       316   \n",
       "4             1         1140          134         1128           48       314   \n",
       "..          ...          ...          ...          ...          ...       ...   \n",
       "709           1         1172           72         1164           62       245   \n",
       "710           1         1150           61         1169           61       238   \n",
       "711           2         1169           65         1163           77       247   \n",
       "712           2         1179           86         1163           45       243   \n",
       "713           1         1186           82         1169           45       239   \n",
       "\n",
       "     FUR_EXTEMP  ROLLING_TEMP_T5 HSB  ROLLING_DESCALING WORK_GR  \n",
       "0          1133              934  적용                  8      2조  \n",
       "1          1135              937  적용                  8      2조  \n",
       "2          1121              889  적용                  8      3조  \n",
       "3          1127              885  적용                  8      3조  \n",
       "4          1128              873  적용                  8      1조  \n",
       "..          ...              ...  ..                ...     ...  \n",
       "709        1164             1005  적용                  8      2조  \n",
       "710        1169              947  적용                 10      1조  \n",
       "711        1163              948  적용                 10      4조  \n",
       "712        1163              940  적용                 10      2조  \n",
       "713        1169              957  적용                 10      2조  \n",
       "\n",
       "[714 rows x 19 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw = df_raw.drop([41,184,185,494,495,496])\n",
    "df_raw.reset_index(drop=True, inplace=True)\n",
    "df_raw"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ": 이상치가 올바르게 제거된 것을 확인할 수 있다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# `탐색 결과 분석`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `1. 가열로 가열대 온도(FUR_HZ_TEMP) : 저 - 고`\n",
    ": 추정된 것과 유사한 상관관계를 시각적으로 확인할 수 있다.\n",
    "### `2. 가열로 균열대 온도(FUR_SZ_TEMP) : 저 - 고`\n",
    ": 추정된 것과 유사한 상관관계를 시각적으로 확인할 수 있다.\n",
    "### `3. 가열로 추출 온도(FUR_EXTEMP) : 저 - 고`\n",
    ": 추정된 것과 유사한 상관관계를 시각적으로 확인할 수 있다.\n",
    "### `4. 사상 압연 온도(ROLLING_TEMP_T5) : 저 - 고`\n",
    ": 사상 압연 온도에서 시각적으로 가장 큰 상관관게를 확인할 수 있었다. 1000도를 기준으로 불량률이 극명하게 나타났고, 이는 후에 상관계수를 계산할 때 큰 값이 도출될 것임을 예측할 수 있었다. 또한, 이상치를 확인할 수 있었다.\n",
    "\n",
    "이상치라고 판단한 이유 : 자료를 조사해 본 결과, \"사상압연의 경우는 일반적으로 850~870℃정도이며, 탄소량이 낮은 냉연재의 경우는 900℃ 이상에서 사상압연을 완료해야 한다.\"라는 내용을 확인할 수 있었다. 따라서 사상압연의 온도가 200도 보다 낮으므로 이상치로 판단할 수 있었다.\n",
    "### `5. 압연간 Descaling 횟수(ROLLING_DESCALING) : 증가 - 감소`\n",
    ": 압연간 Descaling 횟수가 5,7,8,9회 일 때의 불량률이 높았다. 이는 잠재적인 인자로 추정한 내용과는 차이가 있는 내용이고, 이에 대해 추가적인 판단이 필요할 것으로 보인다.\n",
    "### `6. 판두께(PT_THICK) : 후 - 박`\n",
    ": 잠재적인 인자로 추정했던 판 두께가 실제로 상관관계를 보이는 것을 시작적으로 확인할 수 있다. 판이 얇을수록 불량률이 높았고, 판이 두꺼울수록 불량률이 낮아지는 것을 확인할 수 있었다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `7. 기타 설명변수`  \n",
    ": PT_WIDTH 가 작을수록 불량률이 증가하는 추세를 확인할 수 있었다.  \n",
    ": PT_LTH 가 중간 크기일 때, 가장 큰 불량률을 보이는 추세를 확인할 수 있었다.  \n",
    ": PT_WGT 가 클수록, 불량률이 증가하는 추세를 확인할 수 있었다.  \n",
    ": FUR_NO_ROW 는 1,2,3호기를 뜻하는 범주형 변수로, 불량률은 매우 유사하다.  \n",
    ": FUR_HZ_TIME 이 170을 넘어가는 순간, 불량률이 크게 증가하는 추세를 확인할 수 있었다.  \n",
    ": FUR_SZ_TIME 의 불량률은 70에서 최대값을 보인다.  \n",
    ": FUR_TIME 가 중간 크기일 떄, 가장 큰 불량률을 보이는 추세를 확인할 수 있었다.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1.1.2 범주형 변수"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1. STEEL_KIND"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "STEEL_KIND   C0  C1  C3  T0  T1  T3  T5  T7  T8\n",
      "SCALE                                          \n",
      "0           289   0   6  13  16   2  39  29  89\n",
      "1           212   1   1   2   2   0   2   6   5\n",
      "\n",
      "STEEL_KIND     C0   C1     C3     T0     T1   T3     T5     T7     T8\n",
      "SCALE                                                                \n",
      "0           0.577  0.0  0.857  0.867  0.889  1.0  0.951  0.829  0.947\n",
      "1           0.423  1.0  0.143  0.133  0.111  0.0  0.049  0.171  0.053\n"
     ]
    }
   ],
   "source": [
    "fun_print_crosstab(df_raw, \"STEEL_KIND\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 강종에 따라 불량률에 차이가 크게 나타났지만, C0의 표본 수에 비해 나머지 강종의 표본 수가 너무 작아서 의미있는 결과를 도출해내기 힘들었다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2. FUR_NO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FUR_NO  1호기  2호기  3호기\n",
      "SCALE                \n",
      "0       166  166  151\n",
      "1        73   70   88\n",
      "\n",
      "FUR_NO    1호기    2호기    3호기\n",
      "SCALE                      \n",
      "0       0.695  0.703  0.632\n",
      "1       0.305  0.297  0.368\n"
     ]
    }
   ],
   "source": [
    "fun_print_crosstab(df_raw, \"FUR_NO\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 1,2,3호기 사이에 불량률에 차이가 나타났지만, 크지 않기에 유의미하다고 보기 힘들었다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3. HSB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "HSB    미적용   적용\n",
      "SCALE          \n",
      "0        0  483\n",
      "1       33  198\n",
      "\n",
      "HSB    미적용     적용\n",
      "SCALE            \n",
      "0      0.0  0.709\n",
      "1      1.0  0.291\n"
     ]
    }
   ],
   "source": [
    "fun_print_crosstab(df_raw, \"HSB\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 미적용되는 경우에는 100% 불량으로, 적용되는 경우와 큰 차이를 보이기에 주요한 설명변수라고 판단할 수 있었다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4. WORK_GR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WORK_GR   1조   2조   3조   4조\n",
      "SCALE                      \n",
      "0        121  119  115  128\n",
      "1         67   45   54   65\n",
      "\n",
      "WORK_GR     1조     2조    3조     4조\n",
      "SCALE                             \n",
      "0        0.644  0.726  0.68  0.663\n",
      "1        0.356  0.274  0.32  0.337\n"
     ]
    }
   ],
   "source": [
    "fun_print_crosstab(df_raw, \"WORK_GR\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> 작업조별로 조금씩은 차이가 나지만, 유의미한 결과라고 하기에는 어려움이 있었다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. 데이터 전처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 714 entries, 0 to 713\n",
      "Data columns (total 19 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   SCALE              714 non-null    int64  \n",
      " 1   SPEC               714 non-null    object \n",
      " 2   STEEL_KIND         714 non-null    object \n",
      " 3   PT_THK             714 non-null    float64\n",
      " 4   PT_WDTH            714 non-null    int64  \n",
      " 5   PT_LTH             714 non-null    int64  \n",
      " 6   PT_WGT             714 non-null    int64  \n",
      " 7   FUR_NO             714 non-null    object \n",
      " 8   FUR_NO_ROW         714 non-null    int64  \n",
      " 9   FUR_HZ_TEMP        714 non-null    int64  \n",
      " 10  FUR_HZ_TIME        714 non-null    int64  \n",
      " 11  FUR_SZ_TEMP        714 non-null    int64  \n",
      " 12  FUR_SZ_TIME        714 non-null    int64  \n",
      " 13  FUR_TIME           714 non-null    int64  \n",
      " 14  FUR_EXTEMP         714 non-null    int64  \n",
      " 15  ROLLING_TEMP_T5    714 non-null    int64  \n",
      " 16  HSB                714 non-null    object \n",
      " 17  ROLLING_DESCALING  714 non-null    int64  \n",
      " 18  WORK_GR            714 non-null    object \n",
      "dtypes: float64(1), int64(13), object(5)\n",
      "memory usage: 106.1+ KB\n"
     ]
    }
   ],
   "source": [
    "df_raw.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.0 완벽히 일치하는 데이터 비교 및 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True    714\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# df_raw[\"FUR_SZ_TEMP\"] == df_raw[\"FUR_EXTEMP\"] 인 경우가 많이 관찰되어 모든 데이터를 대상으로 테스트한 결과,\n",
    "\n",
    "(df_raw[\"FUR_SZ_TEMP\"] == df_raw[\"FUR_EXTEMP\"]).value_counts()\n",
    "\n",
    "# \"FUR_SZ_TEMP\"와 FUR_EXTEMP는 완벽히 일치하는 것을 알 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_raw = df_raw.drop([\"FUR_EXTEMP\"],axis=1, inplace=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ": 두 설명변수의 데이터가 완벽히 일치하는 것을 확인하였고, 이 둘은 다중공선성을 가지므로 하나의 변수를 제거해준다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 714 entries, 0 to 713\n",
      "Data columns (total 18 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   SCALE              714 non-null    int64  \n",
      " 1   SPEC               714 non-null    object \n",
      " 2   STEEL_KIND         714 non-null    object \n",
      " 3   PT_THK             714 non-null    float64\n",
      " 4   PT_WDTH            714 non-null    int64  \n",
      " 5   PT_LTH             714 non-null    int64  \n",
      " 6   PT_WGT             714 non-null    int64  \n",
      " 7   FUR_NO             714 non-null    object \n",
      " 8   FUR_NO_ROW         714 non-null    int64  \n",
      " 9   FUR_HZ_TEMP        714 non-null    int64  \n",
      " 10  FUR_HZ_TIME        714 non-null    int64  \n",
      " 11  FUR_SZ_TEMP        714 non-null    int64  \n",
      " 12  FUR_SZ_TIME        714 non-null    int64  \n",
      " 13  FUR_TIME           714 non-null    int64  \n",
      " 14  ROLLING_TEMP_T5    714 non-null    int64  \n",
      " 15  HSB                714 non-null    object \n",
      " 16  ROLLING_DESCALING  714 non-null    int64  \n",
      " 17  WORK_GR            714 non-null    object \n",
      "dtypes: float64(1), int64(12), object(5)\n",
      "memory usage: 100.5+ KB\n"
     ]
    }
   ],
   "source": [
    "# 데이터가 잘 제거되었는지 확인\n",
    "df_raw.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1 설명변수와 목표변수 분리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_raw_x = df_raw.drop(\"SCALE\", axis=1, inplace=False)\n",
    "df_raw_y = df_raw[\"SCALE\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2 HSB, SCALE 범주형 변수로 변환 0,1로"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 설명변수 중 SCALE 범주형 변수로 바꾸기\n",
    "df_raw_x['HSB'] = df_raw_x['HSB'].replace(\"미적용\", 0)\n",
    "df_raw_x['HSB'] = df_raw_x['HSB'].replace(\"적용\", 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 목표변수 범주형 변수로 바꾸기\n",
    "df_raw_y = df_raw_y.replace(\"양품\", 0)\n",
    "df_raw_y = df_raw_y.replace(\"불량\", 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# HSB, FUR_NO_ROW, ROLLING_DESCALING, SCALE int -> object로 타입 바꾸기\n",
    "df_raw_x = df_raw_x.astype({'HSB':'object', 'FUR_NO_ROW':'object', 'ROLLING_DESCALING':'object'})\n",
    "df_raw_y = df_raw_y.astype('object')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0\n",
       "1      0\n",
       "2      0\n",
       "3      0\n",
       "4      0\n",
       "      ..\n",
       "709    1\n",
       "710    0\n",
       "711    0\n",
       "712    0\n",
       "713    0\n",
       "Name: SCALE, Length: 714, dtype: object"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 714 entries, 0 to 713\n",
      "Data columns (total 17 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   SPEC               714 non-null    object \n",
      " 1   STEEL_KIND         714 non-null    object \n",
      " 2   PT_THK             714 non-null    float64\n",
      " 3   PT_WDTH            714 non-null    int64  \n",
      " 4   PT_LTH             714 non-null    int64  \n",
      " 5   PT_WGT             714 non-null    int64  \n",
      " 6   FUR_NO             714 non-null    object \n",
      " 7   FUR_NO_ROW         714 non-null    object \n",
      " 8   FUR_HZ_TEMP        714 non-null    int64  \n",
      " 9   FUR_HZ_TIME        714 non-null    int64  \n",
      " 10  FUR_SZ_TEMP        714 non-null    int64  \n",
      " 11  FUR_SZ_TIME        714 non-null    int64  \n",
      " 12  FUR_TIME           714 non-null    int64  \n",
      " 13  ROLLING_TEMP_T5    714 non-null    int64  \n",
      " 14  HSB                714 non-null    object \n",
      " 15  ROLLING_DESCALING  714 non-null    object \n",
      " 16  WORK_GR            714 non-null    object \n",
      "dtypes: float64(1), int64(9), object(7)\n",
      "memory usage: 95.0+ KB\n"
     ]
    }
   ],
   "source": [
    "df_raw_x.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ": `df_raw_x[\"HSB\"]`와 `df_raw_y` 모두 0,1의 object 형식으로 올바르게 변환된 것을 확인할 수 있다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.3 df_train, df_test 로 분리\n",
    "\n",
    ": 모델 학습 Vital Few 탐색을 위하여 데이터를 분리하는 작업을 진행한다. (7:3의 비율로 분할한다.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "from statsmodels.api import Logit\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train data X size : (499, 17)\n",
      "train data Y size : (499,)\n",
      "test data X size : (215, 17)\n",
      "test data Y size : (215,)\n"
     ]
    }
   ],
   "source": [
    "df_train_x, df_test_x, df_train_y, df_test_y = train_test_split(df_raw_x, df_raw_y, test_size = 0.3, random_state= 1234)\n",
    "print(\"train data X size : {}\".format(df_train_x.shape))\n",
    "print(\"train data Y size : {}\".format(df_train_y.shape))\n",
    "print(\"test data X size : {}\".format(df_test_x.shape))\n",
    "print(\"test data Y size : {}\".format(df_test_y.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. 검정"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1 로지스틱 선형 회귀"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train data size : (499, 18)\n",
      "test data size : (215, 18)\n"
     ]
    }
   ],
   "source": [
    "df_train, df_test = train_test_split(df_raw, test_size = 0.3, random_state = 1234)\n",
    "print(\"train data size : {}\".format(df_train.shape))\n",
    "print(\"test data size : {}\".format(df_test.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 499 entries, 206 to 294\n",
      "Data columns (total 17 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   SPEC               499 non-null    object \n",
      " 1   STEEL_KIND         499 non-null    object \n",
      " 2   PT_THK             499 non-null    float64\n",
      " 3   PT_WDTH            499 non-null    int64  \n",
      " 4   PT_LTH             499 non-null    int64  \n",
      " 5   PT_WGT             499 non-null    int64  \n",
      " 6   FUR_NO             499 non-null    object \n",
      " 7   FUR_NO_ROW         499 non-null    object \n",
      " 8   FUR_HZ_TEMP        499 non-null    int64  \n",
      " 9   FUR_HZ_TIME        499 non-null    int64  \n",
      " 10  FUR_SZ_TEMP        499 non-null    int64  \n",
      " 11  FUR_SZ_TIME        499 non-null    int64  \n",
      " 12  FUR_TIME           499 non-null    int64  \n",
      " 13  ROLLING_TEMP_T5    499 non-null    int64  \n",
      " 14  HSB                499 non-null    object \n",
      " 15  ROLLING_DESCALING  499 non-null    object \n",
      " 16  WORK_GR            499 non-null    object \n",
      "dtypes: float64(1), int64(9), object(7)\n",
      "memory usage: 70.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df_train_x.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train = df_train.astype({'SCALE':'int64'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning: Maximum number of iterations has been exceeded.\n",
      "         Current function value: 0.141205\n",
      "         Iterations: 35\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                  SCALE   No. Observations:                  499\n",
      "Model:                          Logit   Df Residuals:                      476\n",
      "Method:                           MLE   Df Model:                           22\n",
      "Date:                Wed, 25 Nov 2020   Pseudo R-squ.:                  0.7749\n",
      "Time:                        04:46:23   Log-Likelihood:                -70.461\n",
      "converged:                      False   LL-Null:                       -313.05\n",
      "Covariance Type:            nonrobust   LLR p-value:                 8.970e-89\n",
      "==============================================================================================\n",
      "                                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------\n",
      "Intercept                   -164.5071   4.55e+04     -0.004      0.997   -8.93e+04     8.9e+04\n",
      "C(FUR_NO)[T.2호기]              -0.8145      0.553     -1.474      0.140      -1.897       0.269\n",
      "C(FUR_NO)[T.3호기]               0.2604      0.586      0.444      0.657      -0.889       1.409\n",
      "C(FUR_NO_ROW)[T.2]             0.0884      0.476      0.186      0.853      -0.845       1.021\n",
      "C(HSB)[T.적용]                 -35.3681   2.76e+04     -0.001      0.999   -5.41e+04    5.41e+04\n",
      "C(ROLLING_DESCALING)[T.6]    -42.1367   3.62e+04     -0.001      0.999   -7.09e+04    7.08e+04\n",
      "C(ROLLING_DESCALING)[T.7]     -1.4370    8.2e+06  -1.75e-07      1.000   -1.61e+07    1.61e+07\n",
      "C(ROLLING_DESCALING)[T.8]    -38.3731   3.62e+04     -0.001      0.999   -7.09e+04    7.08e+04\n",
      "C(ROLLING_DESCALING)[T.9]      1.8885   1.89e+06   9.97e-07      1.000   -3.71e+06    3.71e+06\n",
      "C(ROLLING_DESCALING)[T.10]   -38.5217   3.62e+04     -0.001      0.999   -7.09e+04    7.08e+04\n",
      "C(WORK_GR)[T.2조]              -0.7646      0.627     -1.219      0.223      -1.994       0.465\n",
      "C(WORK_GR)[T.3조]              -1.1117      0.708     -1.570      0.117      -2.500       0.276\n",
      "C(WORK_GR)[T.4조]              -0.8144      0.636     -1.280      0.200      -2.061       0.432\n",
      "PT_THK                         0.1521      0.093      1.632      0.103      -0.031       0.335\n",
      "PT_WDTH                       -0.0024      0.001     -3.030      0.002      -0.004      -0.001\n",
      "PT_LTH                      -5.69e-05   4.52e-05     -1.258      0.208      -0.000    3.17e-05\n",
      "PT_WGT                     -1.268e-05   1.05e-05     -1.205      0.228   -3.33e-05    7.95e-06\n",
      "FUR_HZ_TEMP                    0.0241      0.032      0.761      0.446      -0.038       0.086\n",
      "FUR_HZ_TIME                    0.0089      0.007      1.227      0.220      -0.005       0.023\n",
      "FUR_SZ_TEMP                    0.1332      0.065      2.051      0.040       0.006       0.260\n",
      "FUR_SZ_TIME                   -0.0302      0.020     -1.522      0.128      -0.069       0.009\n",
      "FUR_TIME                      -0.0038      0.007     -0.538      0.590      -0.018       0.010\n",
      "ROLLING_TEMP_T5                0.0653      0.012      5.612      0.000       0.043       0.088\n",
      "==============================================================================================\n",
      "\n",
      "Possibly complete quasi-separation: A fraction 0.35 of observations can be\n",
      "perfectly predicted. This might indicate that there is complete\n",
      "quasi-separation. In this case some parameters will not be identified.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/piai/anaconda3/lib/python3.8/site-packages/statsmodels/base/model.py:567: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  warn(\"Maximum Likelihood optimization failed to converge. \"\n"
     ]
    }
   ],
   "source": [
    "# SPEC은 종류가 너무 많고, STEEL_KIND는 class에 따른 표본 수 차이가 너무 커서 모델 학습에 방해가 될 것으로 예상되어 제외시켰다.\n",
    "log_model = Logit.from_formula(\"\"\"SCALE ~ PT_THK + PT_WDTH + PT_LTH + PT_WGT + C(FUR_NO) + C(FUR_NO_ROW) + FUR_HZ_TEMP + FUR_HZ_TIME  + FUR_SZ_TEMP + FUR_SZ_TIME + FUR_TIME + ROLLING_TEMP_T5 + C(HSB) + C(ROLLING_DESCALING) + C(WORK_GR)\"\"\", df_train)\n",
    "\n",
    "log_result = log_model.fit()\n",
    "print(log_result.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ": 위 결과를 분석해보면, p-value를 고려해보았을 때, \"PT_WDTH\", \"FUR_SZ_TEMP\", \"ROLLING_TEMP_T5\" 의 3가지 요인이 SCALE 발생여부에 영향을 주는 것으로 판단할 수 있다.  \n",
    "  \n",
    "PT_WDTH와는 음의 상관관계, 그리고 FUR_SZ_TEMP, ROLLING_TEMP_T5와는 양의 상관관계가 나타난다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-8.14478876e-01,  2.60386889e-01,  8.84091622e-02, -3.53680947e+01,\n",
       "       -4.21366763e+01, -1.43695815e+00, -3.83730814e+01,  1.88851022e+00,\n",
       "       -3.85216510e+01, -7.64553820e-01, -1.11170922e+00, -8.14362589e-01,\n",
       "        1.52105986e-01, -2.39978658e-03, -5.69014714e-05, -1.26828924e-05,\n",
       "        2.40723454e-02,  8.92364099e-03,  1.33213152e-01, -3.01798385e-02,\n",
       "       -3.82281469e-03,  6.53162899e-02])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_log_coef = pd.DataFrame({\"Coef\":[log_result.params.values[14],log_result.params.values[19],log_result.params.values[22]]},\n",
    "                                 index = [log_model.exog_names[14],log_model.exog_names[19],log_model.exog_names[22]])\n",
    "df_log_coef.plot.barh(y=\"Coef\",legend=False)\n",
    "\n",
    "log_result.params.values[1:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ": 로지스틱 선형회귀를 하였을 때, FUR_SZ_TEMP, ROLLING_TEMP_T5, PT_WIDTH 순서로 영향을 미치는 것을 확인할 수 있었다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2 Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "\n",
    "from sklearn.tree import export_graphviz\n",
    "import graphviz\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "os.environ[\"PATH\"] += os.pathsep + \"~/Users/Juno/Library/Python/3.8/lib/python/site-packages/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_raw = df_raw.replace(\"양품\", 0)\n",
    "df_raw = df_raw.replace(\"불량\", 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 714 entries, 0 to 713\n",
      "Data columns (total 18 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   SCALE              714 non-null    int64  \n",
      " 1   SPEC               714 non-null    object \n",
      " 2   STEEL_KIND         714 non-null    object \n",
      " 3   PT_THK             714 non-null    float64\n",
      " 4   PT_WDTH            714 non-null    int64  \n",
      " 5   PT_LTH             714 non-null    int64  \n",
      " 6   PT_WGT             714 non-null    int64  \n",
      " 7   FUR_NO             714 non-null    object \n",
      " 8   FUR_NO_ROW         714 non-null    int64  \n",
      " 9   FUR_HZ_TEMP        714 non-null    int64  \n",
      " 10  FUR_HZ_TIME        714 non-null    int64  \n",
      " 11  FUR_SZ_TEMP        714 non-null    int64  \n",
      " 12  FUR_SZ_TIME        714 non-null    int64  \n",
      " 13  FUR_TIME           714 non-null    int64  \n",
      " 14  ROLLING_TEMP_T5    714 non-null    int64  \n",
      " 15  HSB                714 non-null    object \n",
      " 16  ROLLING_DESCALING  714 non-null    int64  \n",
      " 17  WORK_GR            714 non-null    object \n",
      "dtypes: float64(1), int64(12), object(5)\n",
      "memory usage: 100.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df_raw.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SCALE</th>\n",
       "      <th>STEEL_KIND</th>\n",
       "      <th>PT_THK</th>\n",
       "      <th>PT_WDTH</th>\n",
       "      <th>PT_LTH</th>\n",
       "      <th>PT_WGT</th>\n",
       "      <th>FUR_NO</th>\n",
       "      <th>FUR_NO_ROW</th>\n",
       "      <th>FUR_HZ_TEMP</th>\n",
       "      <th>FUR_HZ_TIME</th>\n",
       "      <th>FUR_SZ_TEMP</th>\n",
       "      <th>FUR_SZ_TIME</th>\n",
       "      <th>FUR_TIME</th>\n",
       "      <th>ROLLING_TEMP_T5</th>\n",
       "      <th>HSB</th>\n",
       "      <th>ROLLING_DESCALING</th>\n",
       "      <th>WORK_GR</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>T1</td>\n",
       "      <td>32.25</td>\n",
       "      <td>3707</td>\n",
       "      <td>15109</td>\n",
       "      <td>14180</td>\n",
       "      <td>1호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1144</td>\n",
       "      <td>116</td>\n",
       "      <td>1133</td>\n",
       "      <td>59</td>\n",
       "      <td>282</td>\n",
       "      <td>934</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>T1</td>\n",
       "      <td>32.25</td>\n",
       "      <td>3707</td>\n",
       "      <td>15109</td>\n",
       "      <td>14180</td>\n",
       "      <td>1호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1144</td>\n",
       "      <td>122</td>\n",
       "      <td>1135</td>\n",
       "      <td>53</td>\n",
       "      <td>283</td>\n",
       "      <td>937</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>T8</td>\n",
       "      <td>33.27</td>\n",
       "      <td>3619</td>\n",
       "      <td>19181</td>\n",
       "      <td>18130</td>\n",
       "      <td>2호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1129</td>\n",
       "      <td>116</td>\n",
       "      <td>1121</td>\n",
       "      <td>55</td>\n",
       "      <td>282</td>\n",
       "      <td>889</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>3조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>T8</td>\n",
       "      <td>33.27</td>\n",
       "      <td>3619</td>\n",
       "      <td>19181</td>\n",
       "      <td>18130</td>\n",
       "      <td>2호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1152</td>\n",
       "      <td>125</td>\n",
       "      <td>1127</td>\n",
       "      <td>68</td>\n",
       "      <td>316</td>\n",
       "      <td>885</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>3조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>T8</td>\n",
       "      <td>38.33</td>\n",
       "      <td>3098</td>\n",
       "      <td>13334</td>\n",
       "      <td>12430</td>\n",
       "      <td>3호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1140</td>\n",
       "      <td>134</td>\n",
       "      <td>1128</td>\n",
       "      <td>48</td>\n",
       "      <td>314</td>\n",
       "      <td>873</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>1조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>709</th>\n",
       "      <td>1</td>\n",
       "      <td>C0</td>\n",
       "      <td>20.14</td>\n",
       "      <td>3580</td>\n",
       "      <td>38639</td>\n",
       "      <td>21870</td>\n",
       "      <td>3호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1172</td>\n",
       "      <td>72</td>\n",
       "      <td>1164</td>\n",
       "      <td>62</td>\n",
       "      <td>245</td>\n",
       "      <td>1005</td>\n",
       "      <td>적용</td>\n",
       "      <td>8</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>710</th>\n",
       "      <td>0</td>\n",
       "      <td>C0</td>\n",
       "      <td>15.08</td>\n",
       "      <td>3212</td>\n",
       "      <td>48233</td>\n",
       "      <td>18340</td>\n",
       "      <td>2호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1150</td>\n",
       "      <td>61</td>\n",
       "      <td>1169</td>\n",
       "      <td>61</td>\n",
       "      <td>238</td>\n",
       "      <td>947</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>1조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>711</th>\n",
       "      <td>0</td>\n",
       "      <td>C0</td>\n",
       "      <td>16.60</td>\n",
       "      <td>3441</td>\n",
       "      <td>43688</td>\n",
       "      <td>19590</td>\n",
       "      <td>2호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1169</td>\n",
       "      <td>65</td>\n",
       "      <td>1163</td>\n",
       "      <td>77</td>\n",
       "      <td>247</td>\n",
       "      <td>948</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>4조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>712</th>\n",
       "      <td>0</td>\n",
       "      <td>C0</td>\n",
       "      <td>15.59</td>\n",
       "      <td>3363</td>\n",
       "      <td>48740</td>\n",
       "      <td>80240</td>\n",
       "      <td>3호기</td>\n",
       "      <td>2</td>\n",
       "      <td>1179</td>\n",
       "      <td>86</td>\n",
       "      <td>1163</td>\n",
       "      <td>45</td>\n",
       "      <td>243</td>\n",
       "      <td>940</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>713</th>\n",
       "      <td>0</td>\n",
       "      <td>C0</td>\n",
       "      <td>16.09</td>\n",
       "      <td>3400</td>\n",
       "      <td>54209</td>\n",
       "      <td>69840</td>\n",
       "      <td>3호기</td>\n",
       "      <td>1</td>\n",
       "      <td>1186</td>\n",
       "      <td>82</td>\n",
       "      <td>1169</td>\n",
       "      <td>45</td>\n",
       "      <td>239</td>\n",
       "      <td>957</td>\n",
       "      <td>적용</td>\n",
       "      <td>10</td>\n",
       "      <td>2조</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>714 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     SCALE STEEL_KIND  PT_THK  PT_WDTH  PT_LTH  PT_WGT FUR_NO  FUR_NO_ROW  \\\n",
       "0        0         T1   32.25     3707   15109   14180    1호기           1   \n",
       "1        0         T1   32.25     3707   15109   14180    1호기           2   \n",
       "2        0         T8   33.27     3619   19181   18130    2호기           1   \n",
       "3        0         T8   33.27     3619   19181   18130    2호기           2   \n",
       "4        0         T8   38.33     3098   13334   12430    3호기           1   \n",
       "..     ...        ...     ...      ...     ...     ...    ...         ...   \n",
       "709      1         C0   20.14     3580   38639   21870    3호기           1   \n",
       "710      0         C0   15.08     3212   48233   18340    2호기           1   \n",
       "711      0         C0   16.60     3441   43688   19590    2호기           2   \n",
       "712      0         C0   15.59     3363   48740   80240    3호기           2   \n",
       "713      0         C0   16.09     3400   54209   69840    3호기           1   \n",
       "\n",
       "     FUR_HZ_TEMP  FUR_HZ_TIME  FUR_SZ_TEMP  FUR_SZ_TIME  FUR_TIME  \\\n",
       "0           1144          116         1133           59       282   \n",
       "1           1144          122         1135           53       283   \n",
       "2           1129          116         1121           55       282   \n",
       "3           1152          125         1127           68       316   \n",
       "4           1140          134         1128           48       314   \n",
       "..           ...          ...          ...          ...       ...   \n",
       "709         1172           72         1164           62       245   \n",
       "710         1150           61         1169           61       238   \n",
       "711         1169           65         1163           77       247   \n",
       "712         1179           86         1163           45       243   \n",
       "713         1186           82         1169           45       239   \n",
       "\n",
       "     ROLLING_TEMP_T5 HSB  ROLLING_DESCALING WORK_GR  \n",
       "0                934  적용                  8      2조  \n",
       "1                937  적용                  8      2조  \n",
       "2                889  적용                  8      3조  \n",
       "3                885  적용                  8      3조  \n",
       "4                873  적용                  8      1조  \n",
       "..               ...  ..                ...     ...  \n",
       "709             1005  적용                  8      2조  \n",
       "710              947  적용                 10      1조  \n",
       "711              948  적용                 10      4조  \n",
       "712              940  적용                 10      2조  \n",
       "713              957  적용                 10      2조  \n",
       "\n",
       "[714 rows x 17 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_raw = df_raw.drop(\"SPEC\", axis=1, inplace=False)\n",
    "df_raw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SCALE</th>\n",
       "      <th>PT_THK</th>\n",
       "      <th>PT_WDTH</th>\n",
       "      <th>PT_LTH</th>\n",
       "      <th>PT_WGT</th>\n",
       "      <th>FUR_NO_ROW</th>\n",
       "      <th>FUR_HZ_TEMP</th>\n",
       "      <th>FUR_HZ_TIME</th>\n",
       "      <th>FUR_SZ_TEMP</th>\n",
       "      <th>FUR_SZ_TIME</th>\n",
       "      <th>...</th>\n",
       "      <th>STEEL_KIND_T8</th>\n",
       "      <th>FUR_NO_1호기</th>\n",
       "      <th>FUR_NO_2호기</th>\n",
       "      <th>FUR_NO_3호기</th>\n",
       "      <th>HSB_미적용</th>\n",
       "      <th>HSB_적용</th>\n",
       "      <th>WORK_GR_1조</th>\n",
       "      <th>WORK_GR_2조</th>\n",
       "      <th>WORK_GR_3조</th>\n",
       "      <th>WORK_GR_4조</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>32.25</td>\n",
       "      <td>3707</td>\n",
       "      <td>15109</td>\n",
       "      <td>14180</td>\n",
       "      <td>1</td>\n",
       "      <td>1144</td>\n",
       "      <td>116</td>\n",
       "      <td>1133</td>\n",
       "      <td>59</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>32.25</td>\n",
       "      <td>3707</td>\n",
       "      <td>15109</td>\n",
       "      <td>14180</td>\n",
       "      <td>2</td>\n",
       "      <td>1144</td>\n",
       "      <td>122</td>\n",
       "      <td>1135</td>\n",
       "      <td>53</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>33.27</td>\n",
       "      <td>3619</td>\n",
       "      <td>19181</td>\n",
       "      <td>18130</td>\n",
       "      <td>1</td>\n",
       "      <td>1129</td>\n",
       "      <td>116</td>\n",
       "      <td>1121</td>\n",
       "      <td>55</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>33.27</td>\n",
       "      <td>3619</td>\n",
       "      <td>19181</td>\n",
       "      <td>18130</td>\n",
       "      <td>2</td>\n",
       "      <td>1152</td>\n",
       "      <td>125</td>\n",
       "      <td>1127</td>\n",
       "      <td>68</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>38.33</td>\n",
       "      <td>3098</td>\n",
       "      <td>13334</td>\n",
       "      <td>12430</td>\n",
       "      <td>1</td>\n",
       "      <td>1140</td>\n",
       "      <td>134</td>\n",
       "      <td>1128</td>\n",
       "      <td>48</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   SCALE  PT_THK  PT_WDTH  PT_LTH  PT_WGT  FUR_NO_ROW  FUR_HZ_TEMP  \\\n",
       "0      0   32.25     3707   15109   14180           1         1144   \n",
       "1      0   32.25     3707   15109   14180           2         1144   \n",
       "2      0   33.27     3619   19181   18130           1         1129   \n",
       "3      0   33.27     3619   19181   18130           2         1152   \n",
       "4      0   38.33     3098   13334   12430           1         1140   \n",
       "\n",
       "   FUR_HZ_TIME  FUR_SZ_TEMP  FUR_SZ_TIME  ...  STEEL_KIND_T8  FUR_NO_1호기  \\\n",
       "0          116         1133           59  ...              0           1   \n",
       "1          122         1135           53  ...              0           1   \n",
       "2          116         1121           55  ...              1           0   \n",
       "3          125         1127           68  ...              1           0   \n",
       "4          134         1128           48  ...              1           0   \n",
       "\n",
       "   FUR_NO_2호기  FUR_NO_3호기  HSB_미적용  HSB_적용  WORK_GR_1조  WORK_GR_2조  \\\n",
       "0           0           0        0       1           0           1   \n",
       "1           0           0        0       1           0           1   \n",
       "2           1           0        0       1           0           0   \n",
       "3           1           0        0       1           0           0   \n",
       "4           0           1        0       1           1           0   \n",
       "\n",
       "   WORK_GR_3조  WORK_GR_4조  \n",
       "0           0           0  \n",
       "1           0           0  \n",
       "2           1           0  \n",
       "3           1           0  \n",
       "4           0           0  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 더미변수를 만들어준다.(원핫인코딩)\n",
    "df_raw_dummy = pd.get_dummies(df_raw)\n",
    "df_raw_dummy.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 714 entries, 0 to 713\n",
      "Data columns (total 31 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   SCALE              714 non-null    int64  \n",
      " 1   PT_THK             714 non-null    float64\n",
      " 2   PT_WDTH            714 non-null    int64  \n",
      " 3   PT_LTH             714 non-null    int64  \n",
      " 4   PT_WGT             714 non-null    int64  \n",
      " 5   FUR_NO_ROW         714 non-null    int64  \n",
      " 6   FUR_HZ_TEMP        714 non-null    int64  \n",
      " 7   FUR_HZ_TIME        714 non-null    int64  \n",
      " 8   FUR_SZ_TEMP        714 non-null    int64  \n",
      " 9   FUR_SZ_TIME        714 non-null    int64  \n",
      " 10  FUR_TIME           714 non-null    int64  \n",
      " 11  ROLLING_TEMP_T5    714 non-null    int64  \n",
      " 12  ROLLING_DESCALING  714 non-null    int64  \n",
      " 13  STEEL_KIND_C0      714 non-null    uint8  \n",
      " 14  STEEL_KIND_C1      714 non-null    uint8  \n",
      " 15  STEEL_KIND_C3      714 non-null    uint8  \n",
      " 16  STEEL_KIND_T0      714 non-null    uint8  \n",
      " 17  STEEL_KIND_T1      714 non-null    uint8  \n",
      " 18  STEEL_KIND_T3      714 non-null    uint8  \n",
      " 19  STEEL_KIND_T5      714 non-null    uint8  \n",
      " 20  STEEL_KIND_T7      714 non-null    uint8  \n",
      " 21  STEEL_KIND_T8      714 non-null    uint8  \n",
      " 22  FUR_NO_1호기         714 non-null    uint8  \n",
      " 23  FUR_NO_2호기         714 non-null    uint8  \n",
      " 24  FUR_NO_3호기         714 non-null    uint8  \n",
      " 25  HSB_미적용            714 non-null    uint8  \n",
      " 26  HSB_적용             714 non-null    uint8  \n",
      " 27  WORK_GR_1조         714 non-null    uint8  \n",
      " 28  WORK_GR_2조         714 non-null    uint8  \n",
      " 29  WORK_GR_3조         714 non-null    uint8  \n",
      " 30  WORK_GR_4조         714 non-null    uint8  \n",
      "dtypes: float64(1), int64(12), uint8(18)\n",
      "memory usage: 85.2 KB\n"
     ]
    }
   ],
   "source": [
    "# 원핫인코딩이 잘 되었음을 확인할 수 있다.\n",
    "df_raw_dummy.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_raw_y = df_raw_dummy[\"SCALE\"]\n",
    "df_raw_x = df_raw_dummy.drop(\"SCALE\", axis=1, inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train data X size : (499, 30)\n",
      "train data Y size : (499,)\n",
      "test data X size : (215, 30)\n",
      "test data Y size : (215,)\n"
     ]
    }
   ],
   "source": [
    "df_train_x, df_test_x, df_train_y, df_test_y = train_test_split(df_raw_x, df_raw_y, test_size = 0.3, random_state= 1234)\n",
    "print(\"train data X size : {}\".format(df_train_x.shape))\n",
    "print(\"train data Y size : {}\".format(df_train_y.shape))\n",
    "print(\"test data X size : {}\".format(df_test_x.shape))\n",
    "print(\"test data Y size : {}\".format(df_test_y.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Score on training set: 0.978\n",
      "Score on test set: 0.953\n",
      "Confusion matrix: \n",
      "[[144   0]\n",
      " [ 10  61]]\n"
     ]
    }
   ],
   "source": [
    "# 의사결정나무 기본 모델을 만든다.(max_depth를 설정한 이유는 결과 확인을 편하게 하기 위해 하였다.)\n",
    "tree_uncustomized = DecisionTreeClassifier(random_state=1234, max_depth =5)\n",
    "tree_uncustomized.fit(df_train_x, df_train_y)\n",
    "\n",
    "y_pred = tree_uncustomized.predict(df_test_x)\n",
    "\n",
    "print(\"Score on training set: {:.3f}\".format(tree_uncustomized.score(df_train_x, df_train_y)))\n",
    "print(\"Score on test set: {:.3f}\".format(tree_uncustomized.score(df_test_x, df_test_y)))\n",
    "print(\"Confusion matrix: \\n{}\".format(confusion_matrix(df_test_y, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "v_feature_name = df_train_x.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: Tree Pages: 1 -->\n",
       "<svg width=\"472pt\" height=\"671pt\"\n",
       " viewBox=\"0.00 0.00 471.50 671.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 667)\">\n",
       "<title>Tree</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-667 467.5,-667 467.5,4 -4,4\"/>\n",
       "<!-- 0 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>0</title>\n",
       "<polygon fill=\"#f1bc96\" stroke=\"#000000\" points=\"444.5,-663 241.5,-663 241.5,-580 444.5,-580 444.5,-663\"/>\n",
       "<text text-anchor=\"middle\" x=\"343\" y=\"-647.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">ROLLING_TEMP_T5 &lt;= 1000.5</text>\n",
       "<text text-anchor=\"middle\" x=\"343\" y=\"-632.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.436</text>\n",
       "<text text-anchor=\"middle\" x=\"343\" y=\"-617.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 499</text>\n",
       "<text text-anchor=\"middle\" x=\"343\" y=\"-602.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [339, 160]</text>\n",
       "<text text-anchor=\"middle\" x=\"343\" y=\"-587.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>1</title>\n",
       "<polygon fill=\"#e99559\" stroke=\"#000000\" points=\"340.5,-544 209.5,-544 209.5,-461 340.5,-461 340.5,-544\"/>\n",
       "<text text-anchor=\"middle\" x=\"275\" y=\"-528.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">HSB_미적용 &lt;= 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"275\" y=\"-513.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.24</text>\n",
       "<text text-anchor=\"middle\" x=\"275\" y=\"-498.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 394</text>\n",
       "<text text-anchor=\"middle\" x=\"275\" y=\"-483.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [339, 55]</text>\n",
       "<text text-anchor=\"middle\" x=\"275\" y=\"-468.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>0&#45;&gt;1</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M319.2169,-579.8796C314.2763,-571.2335 309.0184,-562.0322 303.9167,-553.1042\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"306.8849,-551.244 298.8846,-544.2981 300.8072,-554.717 306.8849,-551.244\"/>\n",
       "<text text-anchor=\"middle\" x=\"292.3067\" y=\"-564.7172\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">True</text>\n",
       "</g>\n",
       "<!-- 10 -->\n",
       "<g id=\"node11\" class=\"node\">\n",
       "<title>10</title>\n",
       "<polygon fill=\"#399de5\" stroke=\"#000000\" points=\"463.5,-536.5 358.5,-536.5 358.5,-468.5 463.5,-468.5 463.5,-536.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"411\" y=\"-521.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"411\" y=\"-506.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 105</text>\n",
       "<text text-anchor=\"middle\" x=\"411\" y=\"-491.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [0, 105]</text>\n",
       "<text text-anchor=\"middle\" x=\"411\" y=\"-476.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 1</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;10 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>0&#45;&gt;10</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M366.7831,-579.8796C373.1294,-568.7735 379.9993,-556.7513 386.3891,-545.5691\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"389.4689,-547.2339 391.3915,-536.8149 383.3912,-543.7609 389.4689,-547.2339\"/>\n",
       "<text text-anchor=\"middle\" x=\"397.9694\" y=\"-557.234\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">False</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2</title>\n",
       "<polygon fill=\"#e78d4b\" stroke=\"#000000\" points=\"284,-425 114,-425 114,-342 284,-342 284,-425\"/>\n",
       "<text text-anchor=\"middle\" x=\"199\" y=\"-409.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">FUR_SZ_TEMP &lt;= 1175.5</text>\n",
       "<text text-anchor=\"middle\" x=\"199\" y=\"-394.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.154</text>\n",
       "<text text-anchor=\"middle\" x=\"199\" y=\"-379.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 370</text>\n",
       "<text text-anchor=\"middle\" x=\"199\" y=\"-364.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [339, 31]</text>\n",
       "<text text-anchor=\"middle\" x=\"199\" y=\"-349.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;2 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>1&#45;&gt;2</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M248.4189,-460.8796C242.8395,-452.1434 236.8981,-442.8404 231.1405,-433.8253\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"234.0269,-431.8421 225.6946,-425.2981 228.1274,-435.6098 234.0269,-431.8421\"/>\n",
       "</g>\n",
       "<!-- 9 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>9</title>\n",
       "<polygon fill=\"#399de5\" stroke=\"#000000\" points=\"400,-417.5 302,-417.5 302,-349.5 400,-349.5 400,-417.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"351\" y=\"-402.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"351\" y=\"-387.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 24</text>\n",
       "<text text-anchor=\"middle\" x=\"351\" y=\"-372.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [0, 24]</text>\n",
       "<text text-anchor=\"middle\" x=\"351\" y=\"-357.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 1</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;9 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>1&#45;&gt;9</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M301.5811,-460.8796C308.674,-449.7735 316.3521,-437.7513 323.4937,-426.5691\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"326.6518,-428.1267 329.0846,-417.8149 320.7523,-424.3589 326.6518,-428.1267\"/>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>3</title>\n",
       "<polygon fill=\"#e68743\" stroke=\"#000000\" points=\"216,-306 16,-306 16,-223 216,-223 216,-306\"/>\n",
       "<text text-anchor=\"middle\" x=\"116\" y=\"-290.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">ROLLING_DESCALING &lt;= 5.5</text>\n",
       "<text text-anchor=\"middle\" x=\"116\" y=\"-275.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.091</text>\n",
       "<text text-anchor=\"middle\" x=\"116\" y=\"-260.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 356</text>\n",
       "<text text-anchor=\"middle\" x=\"116\" y=\"-245.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [339, 17]</text>\n",
       "<text text-anchor=\"middle\" x=\"116\" y=\"-230.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;3 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2&#45;&gt;3</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M169.9706,-341.8796C163.8145,-333.0534 157.2549,-323.6485 150.9064,-314.5466\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"153.7448,-312.4978 145.1533,-306.2981 148.0033,-316.5024 153.7448,-312.4978\"/>\n",
       "</g>\n",
       "<!-- 8 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>8</title>\n",
       "<polygon fill=\"#399de5\" stroke=\"#000000\" points=\"332,-298.5 234,-298.5 234,-230.5 332,-230.5 332,-298.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"283\" y=\"-283.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"283\" y=\"-268.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 14</text>\n",
       "<text text-anchor=\"middle\" x=\"283\" y=\"-253.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [0, 14]</text>\n",
       "<text text-anchor=\"middle\" x=\"283\" y=\"-238.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 1</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;8 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>2&#45;&gt;8</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M228.3791,-341.8796C236.2963,-330.6636 244.8731,-318.5131 252.8325,-307.2372\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"255.8702,-309.003 258.7777,-298.8149 250.1514,-304.9662 255.8702,-309.003\"/>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>4</title>\n",
       "<polygon fill=\"#399de5\" stroke=\"#000000\" points=\"92,-179.5 0,-179.5 0,-111.5 92,-111.5 92,-179.5\"/>\n",
       "<text text-anchor=\"middle\" x=\"46\" y=\"-164.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"46\" y=\"-149.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 5</text>\n",
       "<text text-anchor=\"middle\" x=\"46\" y=\"-134.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [0, 5]</text>\n",
       "<text text-anchor=\"middle\" x=\"46\" y=\"-119.3\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 1</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;4 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>3&#45;&gt;4</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M91.5174,-222.8796C84.9844,-211.7735 77.9125,-199.7513 71.3348,-188.5691\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"74.2723,-186.6597 66.1853,-179.8149 68.2387,-190.2089 74.2723,-186.6597\"/>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>5</title>\n",
       "<polygon fill=\"#e68540\" stroke=\"#000000\" points=\"264,-187 110,-187 110,-104 264,-104 264,-187\"/>\n",
       "<text text-anchor=\"middle\" x=\"187\" y=\"-171.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">FUR_SZ_TIME &lt;= 37.5</text>\n",
       "<text text-anchor=\"middle\" x=\"187\" y=\"-156.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.066</text>\n",
       "<text text-anchor=\"middle\" x=\"187\" y=\"-141.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 351</text>\n",
       "<text text-anchor=\"middle\" x=\"187\" y=\"-126.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [339, 12]</text>\n",
       "<text text-anchor=\"middle\" x=\"187\" y=\"-111.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n",
       "</g>\n",
       "<!-- 3&#45;&gt;5 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>3&#45;&gt;5</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M140.8324,-222.8796C145.9909,-214.2335 151.4808,-205.0322 156.8076,-196.1042\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"159.9436,-197.679 162.0617,-187.2981 153.9322,-194.0924 159.9436,-197.679\"/>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>6</title>\n",
       "<polygon fill=\"#399de5\" stroke=\"#000000\" points=\"173,-68 81,-68 81,0 173,0 173,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"127\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.0</text>\n",
       "<text text-anchor=\"middle\" x=\"127\" y=\"-37.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 1</text>\n",
       "<text text-anchor=\"middle\" x=\"127\" y=\"-22.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [0, 1]</text>\n",
       "<text text-anchor=\"middle\" x=\"127\" y=\"-7.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 1</text>\n",
       "</g>\n",
       "<!-- 5&#45;&gt;6 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>5&#45;&gt;6</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M164.6582,-103.9815C159.9598,-95.2504 154.9929,-86.0202 150.2617,-77.2281\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"153.2586,-75.4111 145.4379,-68.2637 147.0944,-78.7282 153.2586,-75.4111\"/>\n",
       "</g>\n",
       "<!-- 7 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>7</title>\n",
       "<polygon fill=\"#e6853f\" stroke=\"#000000\" points=\"303,-68 191,-68 191,0 303,0 303,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"247\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">gini = 0.061</text>\n",
       "<text text-anchor=\"middle\" x=\"247\" y=\"-37.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">samples = 350</text>\n",
       "<text text-anchor=\"middle\" x=\"247\" y=\"-22.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">value = [339, 11]</text>\n",
       "<text text-anchor=\"middle\" x=\"247\" y=\"-7.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">class = 0</text>\n",
       "</g>\n",
       "<!-- 5&#45;&gt;7 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>5&#45;&gt;7</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M209.3418,-103.9815C214.0402,-95.2504 219.0071,-86.0202 223.7383,-77.2281\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"226.9056,-78.7282 228.5621,-68.2637 220.7414,-75.4111 226.9056,-78.7282\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.files.Source at 0x7f6a24d9ff10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tree_low = tree_uncustomized\n",
    "tree_low.fit(df_train_x, df_train_y)\n",
    "export_graphviz(tree_low, out_file=\"tree_low.dot\", class_names = [\"0\", \"1\"], feature_names=v_feature_name, impurity=True, filled=True)\n",
    "with open(\"tree_low.dot\") as f:\n",
    "    dot_graph = f.read()\n",
    "display(graphviz.Source(dot_graph))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pydot\n",
    "\n",
    "(graph,) = pydot.graph_from_dot_file('tree_low.dot',encoding='utf8')\n",
    "\n",
    "graph.write_png('decisionTree.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>ROLLING_TEMP_T5</td>\n",
       "      <td>0.626</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>HSB_미적용</td>\n",
       "      <td>0.193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>FUR_SZ_TEMP</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>ROLLING_DESCALING</td>\n",
       "      <td>0.047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>FUR_SZ_TIME</td>\n",
       "      <td>0.010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>STEEL_KIND_T7</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>STEEL_KIND_T8</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>FUR_NO_1호기</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>FUR_NO_2호기</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PT_THK</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>FUR_NO_3호기</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>STEEL_KIND_T3</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>HSB_적용</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>WORK_GR_1조</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>WORK_GR_2조</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>WORK_GR_3조</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>STEEL_KIND_T5</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>STEEL_KIND_T0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>STEEL_KIND_T1</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PT_WDTH</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>STEEL_KIND_C3</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>STEEL_KIND_C1</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>STEEL_KIND_C0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>FUR_TIME</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>FUR_HZ_TIME</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>FUR_HZ_TEMP</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FUR_NO_ROW</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PT_WGT</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PT_LTH</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>WORK_GR_4조</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Feature  Importance\n",
       "10    ROLLING_TEMP_T5       0.626\n",
       "24            HSB_미적용       0.193\n",
       "7         FUR_SZ_TEMP       0.125\n",
       "11  ROLLING_DESCALING       0.047\n",
       "8         FUR_SZ_TIME       0.010\n",
       "19      STEEL_KIND_T7       0.000\n",
       "20      STEEL_KIND_T8       0.000\n",
       "21         FUR_NO_1호기       0.000\n",
       "22         FUR_NO_2호기       0.000\n",
       "0              PT_THK       0.000\n",
       "23         FUR_NO_3호기       0.000\n",
       "17      STEEL_KIND_T3       0.000\n",
       "25             HSB_적용       0.000\n",
       "26         WORK_GR_1조       0.000\n",
       "27         WORK_GR_2조       0.000\n",
       "28         WORK_GR_3조       0.000\n",
       "18      STEEL_KIND_T5       0.000\n",
       "15      STEEL_KIND_T0       0.000\n",
       "16      STEEL_KIND_T1       0.000\n",
       "1             PT_WDTH       0.000\n",
       "14      STEEL_KIND_C3       0.000\n",
       "13      STEEL_KIND_C1       0.000\n",
       "12      STEEL_KIND_C0       0.000\n",
       "9            FUR_TIME       0.000\n",
       "6         FUR_HZ_TIME       0.000\n",
       "5         FUR_HZ_TEMP       0.000\n",
       "4          FUR_NO_ROW       0.000\n",
       "3              PT_WGT       0.000\n",
       "2              PT_LTH       0.000\n",
       "29         WORK_GR_4조       0.000"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_importance = pd.DataFrame()\n",
    "df_importance['Feature'] = v_feature_name\n",
    "df_importance['Importance'] = tree_low.feature_importances_\n",
    "\n",
    "df_importance.sort_values(\"Importance\", ascending=False, inplace=True)\n",
    "df_importance.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Variable')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdQAAAEKCAYAAACrE6QzAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3dd5xlVZX3/8+XJjZNEGiC5BxkBKGU0AoIMiiOmEEUBUQcw5jHkZlxfJ4Znfn5qJjTSJYhKjKIZCS3gHTTDSpKTgJNExu6CZ2+vz/2PlW7T99761bVvRXX+/Xi1feeuE81sOqcs9bask0IIYQQhmaFkR5ACCGEMB5EQA0hhBA6IAJqCCGE0AERUEMIIYQOiIAaQgghdMCKIz2AMDLWW289b7HFFiM9jBBCGFNmzpz5pO2pjdZFQJ2gtthiC2bMmDHSwwghhDFF0oPN1sUj3xBCCKEDIqCGEEIIHRABNYQQQuiACKghhBBCB0RADSGEEDogAmoIIYTQARFQQwghhA6IgBpCCCF0QDR2mKD+8Mg8tjjuopEeRgghDKsHvv7Wrh171ARUSd8BZgNTgZWAbwFbAAcBLwGTgbNtz83bH2n7tNoxWi6TdJrtI5us2ww4BHgxn/9q23c2Ges7gLWA1wM35MW/Af6utukfbN8q6Uzgk7afyftPAU60/b78/QRgOvmJge2Tm5x3C2Df/LU6919t/1bS94GZed3lth9rdIwQQgjdMWoCKjC7CG5rAe8Cptr+YV4m4NPA94Zwjock9dhepueepBWAd9j+frFsjWYHsf2/eRvKAF7/XrgO2A84P38/gBRAKzcU176jpGm2p1Nj+wHggfq5JK0GXGn7183GHEIIobtG5TtU2/OAdYDzimUGbpG0wxAOfQ+wXYPlB5bnyud7fgjnqXsRWLX4vibwXJNtHwY2HODx1wd2kvRBSW9vtpGkj0qaIWnGkhfmDfAUIYQQWhmVAVXS3sD6DR5b/gnYfoiHv1bSfrVlG9h+ZIjHBUDSYfmfd9dWLZA0WdIqwAstDnEQcNMAT/sI6RHy6cCjkvZvtJHtn9nusd0zafJaAzxFCCGEVkbTI9+dJR0G7AD8Ari/wTYClg7lJLYfkbRffoS8/AmkVwM7pk197iCOf06TVVeTHvsuyp/fVqx7fR6PgNsGGtxtLwaezJ9vkXRkP7uEEELosNEUUP9o+xxJ7wTmA3MlbVwLLjsDDROFBugS4ODi++OSXmn7Udu3A7d3OijZfj6/l11s++laPL+hybvXQZ+uvw3+ZuO1mNHFbLcQQphoRlNABcD2+ZI+CfwU+ATwA+hNStrd9lCSkqpzPC1pdfqu/8ryXF20EFjS6YNK2tb23fnzK4Gn+tsnymZGh26m8IcQhteoC6jZZcAbgYslfYqU1LM6cGaxzaslfSB/fsH2+cDWxTJq29ddBBwPnGR7iaSLJH0a2IWUgfsH6CutkXQ4sDHp0epc2xcD20v6LDA3L9+5dv77bf+u+P4U8B+SPgdsKGmK7R8B60ra3fZMSQcDX6yN9Z9t3yTp3bar5KlJkr4F7AaskUtxngZ+CXy3xXWHEELoglETUMtHnrbvIWXkQpO7RttfaLDsKw02LY9bfl4AfKz4fh/w/Sa1rGsAU2x/K39fLa+6DHjA9oN5+Sa2z2hxba+wvV9x3Coj9zxgvbztxaRfJF4LzLH9cKPrJwXwM2z/Y3G8jYBDckZ0CCGEYTRqAupoJOk1wD6kn9M0SUuBx3LQa6STgexdwMuSHgU+n5edWqyfCbxO0uOkO+Q1gVcB5R3xMiR9FPgowKQ1p3ZwqCGEECKgLq/KNq48bfskSbOANwB/qW3/NknzgL2BszsxAElrAmcBk4DHbf8sL+8txcnZyo8DnyRlRt8OPGT7ymbHzcf5GcAqG20bd7EhhNBBEVCX98ey9EXSqgC5heAs4BBJu+R3tgAX5ke+p+dynB1s14Nu2yS9CtgJ+KVtSzpI0krVY+W8zSuAzYBXAJcCVXnPTpJ2AZ6y/ddW54ks3xBC6KwIqAOQ301eIOn9klZusP6anJQ06ICa910DuKosrcmff53P8wzwjKS1gaNJyVLPABfbvm0I5w4hhDBI4zagFs32e9X67u5LTiiS9CVgDjAFOEDStblvbrXtdqTHqS/lbNp3AOuS7hLPBx6UdBDpHeYr8yPblcrewNmTkq4GNiA1cXg6B8V1gd/lcqH5edtTgRtt3yXpN6TG/e/M49kW+ApwG/DfpPetDwF7SXqN7c/19/OZ6GUzUa4SQui0cRtQKZrtQyp/abHtnKLR/HxSb98TivUPA8dIehl4C3BubkKxLylZaWvS+86nbX9b0hGkbk/LyA3v31iOKZfkbE7K8p3fpMHDzaR3tJXXAY+SZpuZQ7ozvVbShsAXc7Zxy0e+IYQQOms8B9RByQHuqPJ7/vgjAEl30tfm71rg2nJ/SZuSEole7uCwHgI2JTWGgNSD+Q7gTaTgP0XS06SZaE4g3QEvF1AjyzeEELpnPAfUMlt3dsstC5LWpUU3I9vX51ldXgecY/ul2iYHAc9LOqa2/Lqqm1GDYz5Iemy8RzHmebYvXXYzn5c7IT0EbGH7a5JOz5+vzeP/CLBcLWw+QGT5hhBCl4zngFrP1t2rtr5sprt+DmQ7A5flWVuasn16fvf5YUlX2r4rn2NP0nvPPw1yzAtaNNefKWk3YCvSe9stinVvlrQl6bHztbZfHOT5QwghDNJ4Dqj9mQrckj/Pze9EZ9Lm9HC2nwV+LOlo4C6lScp3tH1KNwZr++4c9BfnVonl6kurO9R2RdlMCCF01kQKqPNqs9dslNsP9rJ9j6Rpucfu/AbHINeglqUp1Zyy7wAu6Pywl7Eq6T3pkHU7yzeyaEMIE03XA2pRvjIVWAn4Fulx5UHAS8Bk4Gzbc/P2jXrptlwm6TTbR5bris+bkUpOXgK+K+k24HngxiZD3gfYR9LvgGerZvTFMTeT9HlS0s9LwEOSvkxKDtpP0s15u1XyPwvzdZ9eBXBJn6CvGUNvCQ8puahqrr8uKev3ZNIj3VmkTkyLclZweSd9gKRtSK0PF/X3yDqEEELnDccd6uwi8K1FqpmcavuHeZmATwNDmZbtIUk9tmdUC3K27grAO4p60BMlrWH7+XLnWrC+rhjv7pLeVLXza1TSIukLtr8GfE3SarZfzNf5Dts/ydusSH5nm8d0B7Bz/Xh55pnquJvT9570UtLj5NvzOkiN+QFeA5xi+/68bo12fmAhhBA6a1gf+dqeJ2kd0uwq1TJLumWILfvuAbYDZtSWH1ieK5/vedqgNI3aRsAbcnDbW9LttmfVNu19NFwkA70VOFvSPsC2xTEhPSI+mzTt2kDcLGlvLzsdHMA6VTDNY2h6fVE2E0II3TOsAVXS3sD6th+rrfoTsB9Da9l3raT9bF9TLNvA9mXNdmilmlFG0uJ8t7sY2C53TVrsvnlJf6s0v+lVxbvVFXMd6nX5n145KD4v6SlJa9me1+Z4HpA0jeVnk1k8gGuKspkQQuiS4QioVT3oDqTuQfc32EbA0qGcJM++sp9q6a+9J5BeDeyYNvW5jbZp4xzLlbQ4zd36HUn7N3rX28DrcvMHARsCTWeHaeAKSQcCd9VX5EfJ7yW9qz7H9hOtDhRZviGE0Fkr9L/JkFX1oLeTHo/OlbRxbZudgTs7cK5LgIOL74/nRgjYvj2PY7WGeza3Sjsb2b4qn29DYLGk5fZTml/1ZNvn2D6bAf4SkRO3prLsL0Ir5nVL8/X9gZToFUIIYRgN2yNf2+fn5u8/BT4B/AB6k5J2tz2UpKTqHE9LWp2+67qyOleRbTytuolt1Cw/f66a5e8EbCDp8kbny3eaBo4CngK2If3ScBHwX5Juz5uuTsranVV7B7tCHu+BpEb5O5L680J6tHsQubWh+hrk/wb4IGm2me+SHnXvDbyN9Mh8e9Id7KmtflaNymai1CWEEAZvuOtQLyM1h79Y0qeAF0nB5sxim1cXpSMvOM07unWxjNr2dRcBxwMn5QYIF0n6NLAmqZPQCbZvUfNm+VUT+rnATfkXgWOBhbUx3E9qWn8SKRlqLWAWMDNn+p4B7Am8DOwBfIEUOEs35WVXkLJ1l5Deif6Rvr69lZuBvW3foNSkf0fgtjy+z9L3d3lvPz+fEEIIXSB7YuSm1N9vNvheTudWX3eU7VObHPcNwJO2/9xk/abADravGMoY8y8AC22flb9/EFjBfbPV9PbzbXH8Mst3900+vmxTp7hDDSGE1iTNtN3TaN1E6pRUNst/mdS8obz+dWnQhUgdaJZv+8ShDb3vdHlMvQ3yi3X75/e3AJc7TUJeH2tk+YYQQpdMpIBab5a/dnnXKWm/YtuONsvv4DW0apB/1UD7+YYQQuiciRRQ+zPqm+X30yB/QKJsJoQQOms4ymZGq3m18p2GzfKB9SRNaXYQSbvUFnW7Wf6q5AnOQwghjB4T+Q71AuCzkp4n1W02ezR7FqlM5aQm65Wb3S8l3eWeLukHwKuBv831qI+R3n+uT19ZzDVOE4s3OmA9OWlnUrnPesAG+ZwvVdsC1wAHStoEeAPpMfX5bfwMQgghdMiEyfIdTrXs3DWBN9s+t81OSg1n18nLl8vm7S97uZmenh7PmFFvfRxCCKGVyPLtgKJZfunWBs3yl2H7OUlVd6btJB1T2+Ru29fV9+uGsmxms802G45ThhDChBEBtU1Vs/yByg3t/5C/3tXO3eMA7VE9/s22bLZhWTbT09MTjyZCCKGDIqB2x65Fk/4HbE/v4rlurpUDNesAFUIIoYsioHbH7C7ciYYQQhjFJnLZTAghhNAx4+IOVdLhwMak+sxqijOA15PKVBbbPqOYRaZyhe1HJZ1AXznLiwPJyM3nL7N6twN2B06rLT8NuKrJPicA00nN+5+lwWQA7kvH3l3SFsW1TZN0DbAXaaq5aZJ6gB/a7sSUeCGEENow5gOqpDWAKba/lb+vZvvF/JlaUJzTJEje0IlHtEWJzKcbrH4I+FOTXW8oguvuwDzby008nutWv523q66tGveDefnpwAcimIYQwvAa8wGVNP9oryqYDrechPRJ0tRxjdwDbEea6g1graKEZu+qUb/tk/J0cYN1AGmavEZjjLKZEELokjEfUG1b0kxJnwEutH1fi82rpvcAj9q+Pn8uS0+m2/7rIIZyDDDJdn0e09K1kvazfQ3pLrS6K11cu0NudYz+TLU9t9GKKJsJIYTuGfMBFcD2rZJmAYdI2qVF2725ZYlJ4eYmy9v1OuBEYImk/W1f1Wgj249I2q8oqemGpV08dgghhCbGTZavkwuA1SStPMynv9X2LNu3k3r4tnIJcHA/26wymEFIWh94ajD7hhBCGJoxf4eas2r3JDWefxLYCZgsaRFwdL4ZXGz7DODg2s3hFbYfLbaDnOULTKMv4ac/e9DXPP9Pkr5m+8u1YxwLnGb7aUmrA/sU647Od62TSBOdN22yK+lNpIzmcszXkLKDvwI8Lmkb2z9pc+whhBA6YMwHVOAZ4CDgalKgucn2ryC1/WuQvbu4+Fz12HWxfKXqkWytdOUm2/e2GkjO8t2RFNTqd/9PSeqxPQO4CPhYsc7AEkD5z6ZPDqrs3/q15USmC4D7gV0kbR+ZviGEMHzGQ0B9kjQV2okN1tVb/l2c71TrTq0vlzS9ybaNTC+zfKvEJEnl+X9FzvK1vSDXpZbnP704dztZvvVre4gU9J/Pj37n13eILN8QQuieMR9QhyvLV9KGwFsbnL961DvQLN9WFkralvRYuDS/RfLU5cAXJV1Jmiz9dw3GGlm+IYTQJWM+oMLwZPnankPzScY7nuVr+27g7v62K+xLqj9dHdhekoruSiGEELossnw7YzRk+W5q+7Z8Z/oLUvvDEEIIw2TMB1RJ20latVzE8F9Xmeh0UZ6MvCHbT5PuIhs+HZD0WlJXpYFarfg8mZQtHEIIYZiMh0e+DwPHSHoZ2AC4Dfj/JM0mNYoHqPrebpAzd3cAniBl274HeLOk/YA1gOuB78PyWb7AJsBWtk+pFpbzj+aSlq2A/SRtBrzcZMwXAcdLuhb4v8CakpaS/j6erR5Z5/Ka19teppWgpA2A4yQdlRc9lI/3ZWAz4E5yz98QQgjDY8wH1Ny790flMknrlo3jq6Bn+xv5+76kib8flDTH9huLfY/N7x6Xq0GVtAnpkfIatp8vxnCapG2AVarEH0lrAe8qtyk+LyCXzUj6V2AL29fm75tKOiBvOglYvfj+qO0/236cVJ5TjeuN+XHz7ZLebfu8AfwIQwghdMCYD6hdsKjRwpzlezCp7vWbkm7Jq6rHvfvYPrna3va8wbQYtP2wpMeA/wTeQgqqDwGXAusBf26wW1vtBqNsJoQQume8BtSdi/KY2e3uJGldUmOF5dieI+li4AFSPelttucWj3wb7feUpLVsz2t/6AAcCfwW+AbwEvAq4CDb32sw5u1p851rlM2EEEL3jPmkpCb+aPuc/M+dpESlUvl9fUmHSfoqsGPZYKEZ21cAB9YXN9hUTZb3ZyXSNTyVHw/fwbKJT+ng0kqkx8WPDOIcIYQQOmi83qH2ZypQPbKda/scSTOB7QdwjAclbVl8b/SzXNf2c4MY33nAj3KfYgNPA58vN5C0CvBe4KxBHD+EEEKHjdc71Lp5kjYuvm+U7/x62b4HWE/SlHYOaPsGYK9i0TWSDqm+SFqbJo+P2zj2E7YPJTXXP872AbZvK469NfB24CzbgzpHCCGEzhqvd6iH1/KBBBwm6XlSjeZLkja3/SB9M9BMIZXdfIL07rKRXYDXAt/K3+8AvkSaReY+Se+WdDopkK5IakfYUG6e/w1gI2CqpFfaPkvSuaQ7aEi/8Kwt6bhi1/eR+vR+HPh4HvtDtqt3uXuS7nBDCCEMo/EaUM+qzcRypO1vF9/3Lba9uMGsLc3cBryqKpuxPVvSpXm/bYA7bH8zf18LeD9wSpNjrQH8p+1nJK0IfCov/wIp6QlShu8UoEpqejSXzACUpT69n0MIIYyM8RpQh2JR7nS0UW35rfnPy0jlM/Xevw3LZvIj5MNY3jlV9q/txZKezp+rspnPAfuREpRmA9+w/WSTMZdlMzc1u7AomwkhhO4ZrwF1SGUzti9usn5fUrbt05LWtz23WN2wbIY0A02zpvrVcddi2enWjiTdDZ9MX9nMx4GvNtg3ymZCCGEUGK9JSWOtbOadwIXF9yibCSGEMWa83qH2Z9SUzUjaDbinNo9qlM2EEMIYM1EC6jxJGxd3cg3LZiRNkzTF9vwGx6C2/Q2S3l8sqspm3kh6XDsZ2FPSg8DGwOuBG6ptcx/hrYFtq7lYJe1JCuo7ADcDV5Duci8DtqhOlPf7PPBpYBNJvb2ASY35b7T9aJs/mxBCCB0wUQLqBcBni7KZG5tsdxbwQZpPJF53B3AAQC6b2RJYm/RzXQJ8BjgwN89fpkF+7g38X8AFeVYb2z5T0ueBbUjvTqvZao4CVpU0j1Q2cx/we9tLyvKg3ET/sQimIYQw/MZlQC0DV/6+lCbTmdVmgVlIi2Ba3AVW32dTJD3Z/q2kTWqBs5yntNx3Dg2yf20fWs6Gk4+xOcWMNHnZMvvlsp2NSFO3NRRZviGE0D3jMqAOVbOyGduzBnicacA9ko4B9s71ppVz2nm0XNg/39VW1i8+rwEcDvyl1dRtkeUbQgjdEwG1gWZlM23atZi27QHb1wDTJS2u3zkP0FW1O9Qji3WHkroyfVTSSrYbTkEXQgiheyKgdt7sIQbOwTjN9iJJ55AeI//PMJ8/hBAmvPFahzrRLAbInZQmN3tvG0IIoXvG5R2qpO9Q65BUSxTqTfqR9CVgDqln7nqku70Hmhx3X2Ar26cUy46sji3pTaSylZVIfXhPsr1cQ4a87Qqk7N0lwMrA9bb/UttmdVK5TX35BsBxko4CVgGeA6rHwS+QMoGb9RAOIYTQBeMyoFJ77Fp731g3p0Fz/BNabL9a1Ry/XJizbFexfXT+vhapBOcUaJx5LOm0avo1SZ8E/iJpU9LfyzakmtTV82ck7Wj7z7lB/o7Fucvm+C/ajke+IYQwzMZrQB2K/hJ6BtQcv9EBcrbuW/NnSLWrG+X9htocv6komwkhhO4Zr+9Qd879eQ/LzePbUjXH72ez3ub4teUNm+PnO9Vl2J5j+6TcNH8TYKrtfyw2qZrjf4jU5/eXpOb4jcY8oOb4tnts90ydOrX/HUIIIbRtvAbUMdMc3/a/A9+W9J5icTTHDyGEMWaiPvIdNc3xAWzPlbRysSia44cQwhgzXu9Q6+ZJ2rj43rA5PrBenhC8X7ZvAPYqFlXN8QGQtDYtHh9L2lTSqsWirYpjP2H7UGAacJztA2zfVuy7NfB24KwqqSmEEMLIGhd3qJIOJ83o8iQwF5iWk32qGV6WAIflVoAvktoBHkmazQVJJ+TtJgHfBD5elsO0cAdwQLWtpC0lfZmUYHQ70DslW87oLbOND0qL9RJwLHBpblH44XK/vO9xxdcfkTJ/X0/KOAa4Btgc2BrYTZJt/6qfsYcQQuigMR9QJa0BTLH9rfx9tap1YIMZXp5qECTrM8GcTBPNmuMXZTm3AK+y/bV8vjKAPiSpx/aM/H1RUb+6QvF5NvAK21f2c931a/ur7eskPcfyfYirbSLLN4QQumTMB1RgmQbztl8c6gFzc/x9as3sWzbHzyUynwSOry2fQmoH+EpSr91d8qpJjY5je2auhR2Q4tHv+cD7m2wTzfFDCKFL2g6okiYBa9p+povjGTDbljRT0meAC23f12Lz9SVVU6Y9avv6/HmP/OgVYLrtiyVNHWBP3mOASXkKuHJ884GTJC0GriRNKH5NP80mFrZY15SkN5NKbj7f37YhhBA6q62AKuldpPdzkN4xIun9ts/s1sAGwvatkmYBh0jaxfb5TTada7vekAHg5ibL2/U64ERgiaT9bV/VZJyPSNqvWcOHobJ9qaTLSY91f9qNc4QQQmis3SzfLW1/E3i8WNaVoDBYTi4gJeqs3O8OnXWr7Vm2bwde3c+2l5A6LbWyymAHkidTv1HSToM9RgghhIFr95FvFUjL927rdXgsg5JrNR+yXT2yFV0uB2qQAbwH6bHu4cCGkr5NerxbNdR/DbB9bikIKUu34c9e0o9Ik5EfXix+C7ABsJ7tmXnZ2pLOJtXUCliNlO37b0APcNGQLzSEEELb2g2oN0n6CLCjpIXAlsCvuzesAXkYOEbSy6Sgc1sRXOs2kPSB4vtNtu8lBbCyE9GZAE22bajINj5O0qdIwe29efX5wH62L5f0YVIf4OOBk/L6vSUtJf19XGn7k5LeVZa+NHhKvDvwKdtP5PUHA3sCXwNm2J7TbKwhhBA6r62Ampse3FM1PciJNqNCzur9UZN19RlevtFku79vsHggCUnTKbKNbf+gOka+Qy3H4txU4mP9nH/N/PPeEfgGsCrwD8X67wG7SJqRz3076VHx9c2a6EfZTAghdI/sxtUTeRqxVv6mqvecCMoZYkh3ng/kz1cDPba/KGk34A0U2cY5oP4NMA/YGzi7Xs/a4FzbkB7lvhu4m9THd11gBdtfL7Y7hvS0YAdSQL0qd3DqV09Pj2fMmNH/hiGEEHpJmmm7p9G6VneoW7ZYB9CqPGXcyY9QTwKQtLjWVGHVvE2zbOMLbT8InJ6zfHdwbTLx4lhvAl62fX2++3wvqbfvhuT31vmXnXVIk4n/Iu86BVgn17k+aPvZjv4AQgghtNQ0oNq+rr5M0iuAlzrRPGG8crrlv0DS+xtlG+ca1A8ADQMq6Y73WEn/USw7FpgMfDof42HgYUm7Av9Cmk/1EeCUsudvCCGE4dNuHeoBpHKQR4DFSvOGTrd9RzcHN5a0m20saXPgqWbHyR2PfkqtjjTvt17x/QOkd6cfB54nJWR9QNKTtv88tKsJIYQwUO1m+W5p+zvlgpz1O2oDqqQP2z45f94cODTX0lbB6GzgCGBlUjnQM7bPy+urLkYrk1oGXp375PaWy0haDfh729/N2y6XbUy6q3wnqZRmAfBX4H7A+RzLHL/FtbyHFDj/qVj8NtLk5GWi0pqkSQAOGG0drUIIYbxrN6A2esS7oMGy0WSBpFXzHeMupIBXESnQ/db2XwEk7SZpnyqw1d6RHgv0Brw8s8wXgB/Xtl0m21jSp4EvVH12Ja1h+/l6HWv9+HW2fympnpb7UeDbpFlmNiYF6/Ns/1d/P5gQQgid1zSgStqHdOcmYOPcfvCJYr+BTMY9Em4lBdKbgZWAFyStnktWlgJrVcEUehOKPkzjwLao/CLpaFLwavouWdL2pHrQ3vlKbT9frD+MlEgEsGeuQ73O9t1NDvlU0dQBp4nLP5KP9S+kXw5ubjaevF2UzYQQQpe0ukN9oMnnStMmB6PEPcDhpIAq4CZgL0nXke64V2qwz3KTdedJAdYovu8L7Ar0N9/oDqTmDg1VvYPz8SfbPqnZts3k7OLDgJ+QgvJutm9tcc6YbSaEELqkVZbvQ8M5kE7Ls9AslbQB8LjtuZLWJ9WE3kaaoHu53aoP+Q5yY1LbxRPy4rVJ5StfAo6izQb0krYmtQOcbPuUFsdvm6TdSe9ozwTWt32JpK0kvRGYHe9QQwhheLWb5fseUheevUl3elOBdWx/uYtj64QlpEBWTda9GNjcac7RNzbYvveu1fY5uezlmCJzd35xZ/lcnuLtiQbHgVQW8yrgd7ll4b3llG1Njt+28vGvpD1Jj6DvY4LVB4cQwmjRblLSFNunSlpo+xewXJ/bUSe/D51DynzdUNKhwJ3ApDz2eZI+Ryo9MalRwu/y7tNy79yVgd0lHZMfye5BX//dXwOnAu9pdH7bd0o6Lt9Jvkh+F93P8VtZTdJXbf9bvr7PAYfkdVMlldm+74o71BBCGF7tzsqyNP95l6Qd8+fR/g5uAfBHUhZsleU7E9iCvqnnltKXeLWE4udh+zTbJ9j+CLCvpPrP6u+B8yRt0mIMAiblz4uBWwZw/HQAaa38C8ARpOb+2+UWh4cUm02q7faVFmMKIYTQBe3eof4ZwPZtkg6T9DpgbveG1RG3AhvZ/n+S3k1q0/es7e9Iej8py/d75Q5Flu/02gkVM0AAACAASURBVLGusr1U0vS8XZXl+0Czk+cs32tt/67B6obHb3Qc2/Mk/Rn4P8Amtu/Kq3ofWUeWbwghjLx2Z5sp76zO6d5wOmpYsnwlbQvsU9ttPvASLbJ868eX9Bpgt9rqx4BLgb1t/7B8B5v3jSzfEEIYJVoGVEmH2P61pA/R4BGv7dO7NrIhGq4s31w3ulztqKS3F5/7zfLNiUmzGhznvaT5U+vLI8s3hBBGkZYB1XY1ifgvbb8wDOPptPGQ5bs1sEJOYtpD0n22r48s3xBCGF3aTUoa1Rm9LSwA1rD9cv7+En13oc+U7fwk9ZCygHvZXgjclpOAIAXkyrnAoc1ObPtOoKdZslGT4zfa5uu2z8mB/Gbb1zfbNoQQwshpNylpjqRDqD2SzNOIjUo5wegi4KiqOT7p8eihRXP8n0haJe8yx/aX8ueyrOWVwBRJs4FpQNWDdyVSycsmZQvDmouBcyVVpTnVu+iGx2+UmCRpK+AAYCGwn6TTSe9wz2HZ2WdOLHY7y/Yn+v0hhRBC6Jh2A+q8/Gc56bhZtuH8aLMAmJezfA8BHrb9CPAdSUeQmuP/R5Pm+NPrzevLLN/sE8AnW/XzBQ4GDiub4+flDY/f5BgP2j4hb3cvsHNOPNq22P/o6t1sCCGEkdFulm/TmVBGsWFpjt8iy3c2LZrj14/fLMvX9sXF902A8xvsv5GkPaJsJoQQRk67rQcPBNYnBag/kFoPrmz7610c21ANS9lMP1m+1/Q3yOr4tmfRIMs3b7MD8EXgzOJ9cJTNhBDCKNLuI9/NbZ8o6WXbvwTIj01HrfHUHN/2X0iTl/+dpM1sPxRlMyGEMLq0m+VblXU8UrTaa/bObzSpymZ+n79XZTP30fgOdZmyGeCHwJr1spn8/TlJU1ucuyqbwfa9+Xi9P7Mmx2/J9m9IiVHYnpnLZxYBe+Zl99m+OoJpCCEMv5YBVVLVzP0RANs3AgflesqFXR5bJ4z5shlJ29U+L262bQghhJHT3yPfHSUdACyRtHu+KxrwRNjdJulw0uPTJ0k9hqs7xwOBlSRNsn0GabaYLSWtmde/Q9ILwIdI7y9vlfTKfMwjcwP730n6aC6b6WV7saQ5+Y79gCprNwe9nW3/inSH/ClJC0iPiHub1teOf72kk0m/4Dxr+7ziVKvmZKmFpJlz7pH0FeBj9GVfPyPp3+lrkn+v7b8b7M8zhBDCwPXXKanqMISkrXMbvKXAc8D17T6q7KZcijLF9rfy99WqUhZJlOUpwF22/7XBMRbVtqPW1ehn+eMy21SBL9eUkgP1m21/P28yvwi0m5N+btg+rdaX98Riu90lvan62du+Hbi9NuTLJT1YK715n+2zG/+UQgghdFu7SUkU7fPWBQ4CvkrKPB1p88sv/dSFdlxVNiNpRVLd6WWSDvPykwjcA2wHzGhynLJs5g05ANfLZlqZojQR/DqkWW7urG8QZTMhhNA97ZbN7ArsSLo7fRz4he0zuzmwduVs3pmSPgNcmBOOmlk/Z9cCPFq08dtDUnW3Pb1F56NG5787l+KsBMwq7mYbuVbSfravaXCc3rIZSYvrd8xtuBCYm38eX8g9f5epn42ymRBC6J7+Zps5mpQEM9P2WcMzpIHLTRlmAYdI2sV2o+YHkAJOo+nnbm6yvF2vA04kvWve3/ZVTcb5iKT9VD0j7iDbjxdfryV1Urqj0+cJIYTQWMssX9un2D7d9qj/H7OTC4DVlGZxGU632p6V33e+up9tLyE9Gm5llX7W92chjcuCQgghdEnb71BHq5xVuyepk9OTwE7AZEmLgKPzzeDinOV7cO3m8ArbjxbbAbxo+1yWbYTfnz2AKvv5T5K+ZvvLtWMcC5xm+2lJq5PaFVbrjs53rZOAdWnynjVf75tIGc3lmG8gNXn4W+AZ0rva/9vm2EMIIXTAmA+opAByEHA1KdDclEtWkDStwbvIso5ztfyni+UrVY9klWalqdyUE7Oaylm+OwKPN6g/fUpSj+0ZpFlwPlasM6nERvnPVrWrVza6Nkk/A27Mx1pxNGRghxDCRDIeAuqTwDW2T2ywbnrt+8X5TrXu1PpySdObbNvI9ByEPwkcnxs2oGVnp/kVOcvX9gJJZaA/1fbpxbmPbeecte83FW0N95e0ue0Ha9cUWb4hhNAlYz6gDleWr6QNgbc2OH/1qPcYYFIVTJtomuVbs1BNZrFpkTxVNvZ/jPQIfJmAGlm+IYTQPWM+oMLwZPnankPfe9K6jmf5usksNm0SRaP/EEII3dduc/xRL7J8l/nlaCNSC8YQQgjDZMwHVEnbKc0L2ruI4b+uMtHpIklNA6btp4HVafJ0QNJrSV2VBmoFSVWpzHa2HxrEMUIIIQzSeHjk+zDwY0lTSIH0j8Bh+alqvWzmMEl7FfuelmfQOa5YvhD4DDBNUhkoW2X5luUxAt4l6VIalM3kzxeROhtVj5CPkzSN9PfxhO0vNbvYJmUz1wC/BC7I2cXfarZ/CCGE7hgPAXVF4EbbJ0C/zfHPadLS7+sNmuMPKMs371M1x/9IdYxim6urspkGWb695683x68rymbq1wapzvbIZvuGEELonvEQUIelOX5/Wb5l2UyTQ7Rsjl8cb6akYweR5duvKJsJIYTuGfMBdbjKZvrJ8oUOl80MMcu3oSibCSGE7hnzARWiOX4IIYSRN+azfCtRNhNCCGEkjfmAGmUzIYQQRoPx8Mj3YeAYSS8DGwC3tWgMv0GThvd710pkzoTlm+MD/wDclr9PBu6icQnL1g2a479B0s9tG7gib1e9kz1U0hrArsACYLakTwGX2L5H0p7A9sAOpN7FTwIbS9oc2ML2tXnWndcCR+Vr+Y3teU1+DiGEEDpM6f/voR25JKUqb6lKZM4tl7fYdxrweA6QbwB2tv2TvO4I2/9TP46kzwM/sL0of98XeKBqel8G1EZjbKWnp8czZrRMOA4hhFAjaabtnkbrxsMd6rDIZTP7SCp/ZnsD57Z5iFtJ707vITWu/72k7WzfBSxtcL5tSf14j5dU3RVvCpwyyEuIspkQQuiiCKhtsj1H0nXFHeo0YNYA9n+xeNcrYDbwbtJj4+UCai6b+U7trnjfBofePwf7yvotxhBlMyGE0CURUAdm16Lk5QHb9TlJ+7Mk3+Eusb1E0oqS1mVojeyvqj/yHcKxQgghDFIE1IGZ3c77yRYWA7vQd2e7mJSI1PBlpqRXkhKQQgghjHJjPqBKOpyUafsk6U5val71euAGcmN8SV8C5hS7XmH7UUkn5O0AXmw3yag4/5HF5+1IyUa/qj2qPc32kcCdwEHAE8ADpAzlbwAnSZpECq7leQ8Hvlc75SskvQ14kZTV/ICkycAHSI3995d0qe3H2xl/CCGEzhjTATWXmkyx/a38vVVj/DlNguQNQ7zrrMZSZf1+v8HqhyT1kO5MP0QKqJDuTJ+1fWo+xv+R9F/AX4A1gfNtL64d6xDgq7nl4uak/sAvAifZXpqncHsrcPJQrymEEEL7xnpjh2FpjF8cv1ng/TmpMf5Pm6y/hzRH6RLbXyyOt4g07Vr1/d+B+23/3PYPG/Qlfhy4PNeyYvtB21fkLlFVYtNNpISn5Uj6qKQZkmY88cQTjTYJIYQwSGP6DnW4GuO3obcxfjErzd5Fic3ewFfabYzfYt32wNWNVuT5YL8MPFndsddFlm8IIXTPmA6oMGob458kaXHxDnVxBxvjN9zf9nzSROXbSjrQ9hVDPE8IIYQBGOuPfIEJ1Rj/L8CrWu2c61enttomhBBC543pgDrRGuPbvhPoKe9yJW0uqbd3cP5ziwFdQQghhCEb6498HwZ+nN8frgD8ETgsx5uqYf1i22fk5XsV+55m+0bSY9Jq+ULgM8C0WrP8qol+I9PoK3UR8C5Jl9aWH1t8vgi4kL7G+MflrksrAk/Y/lI/13wZcK6kBcDKpISo3wNflfRW4BcMoT1hCCGEwRnrAXVF4EbbJ0C/ZTPnNMnS/Xp9uaTpOQi3Y3repyqb+Uh1jGKbqyX12J5he4Gk8nxfL9617i7pTbavbHG+vwUOrTJ9i2v+V0mXkzo4Pdrm2EMIIXTIWA+ow1I2U2TuLsP2SXm9SGUzxzc5xD2ketGW07vYninp2NwYf5/a6vmkqeNuqYJp3qfta47m+CGE0D1jOqAOV9mM7Tn0PaJtpLdspsU217ZbNpMTi+6ur5D0dpqUzbQjymZCCKF7xnRAhVFbNtNonF0tmwkhhDCyxnSWbyXKZkIIIYy0MX2HmpvR70maA/RJYCdgsqRFLJ/le3Dt5vCKnLxzdLH8RdvnsmyGbn/2oO9x8J8kfc32l2mQ5Wv7aUmrk96PVuuOznetk4B1afGe1fadkv5Z0m6k/r0rAXfYvk7Su4EeYKGk/+zn8XMIIYQOG9MBFXiGNHvL1aQZZ26y/StIE4A3yOotS2FWy3+6WL5S9UhW0geKbVuVzZC3XxPYEXi8qgktPFVl+ZLKZj5WrDOwhPQodwntPTVYIW8v4Pk828x+wDzgJeCfgX9v4zghhBA6ZKwH1CeBa2yf2GBdffLvi5uUwpxaXz7Qspkyy7e6M6yVzfyKnOXboGzmVNunF+c+ttmJJO0AXG37ptryNwLftn1//v7hJvtHlm8IIXTJmA6ow5Xl21/ZDB3O8m1RNvMSjbN8pwI3Ft+XNDpwZPmGEEL3jOmACsOT5dtP2UzHs3z7KZtptn9k/4YQwgiKLN+hGw1ZvnOBjYrvk/o5RwghhA4b0wE1muOn5vikXr775O/rUOsgFUIIofvG+iPfh4FjJL0MbADcZvulJttu0CRzd+9aI/wzoXGWr6TvALNbjOeVpIB3KX1lOlOAAyRda/sBUpbv8fQ9Qn6DpL1Jd5WbAWdI+oDtMyQdWfT5vcT2W4CzgE9J2ow0q8xX8p9vzE32Vyc9gg4hhDCMVLSFDf0oA1yT7/uSmtM/2GDdsVUT/8EcX9KJwH/Yfih/P4KUCHVaed52r6Wnp8czZrRsLRxCCKFG0kzbPY3WjfU71GFRZPnuLan8mS1usksjiwZwvirLtzzfImAv4KH8yHfAvwlF2UwIIXRPBNQ2VFm+uQ60ej85m9SlqV+S1qVJKUuT890N3C1pcXGHupi+TN49gd+xbGnN2yQ9kT+f36iEJ8pmQgiheyKgDswfyxIbLTthOSxbulLVve4MXFY2bxiCuZKmApvZvlFSGVAvHMgj3xBCCJ01prN8R6GppO5N0Ff3ehqwVoeOfz3wBgb2qDmEEMIwiIA6NPMkbVx838j2gnID2/cA60maMtST2V4E7ADcPtRjhRBC6Kxx/8i3UalLi8zcLwFzSKUu65FmiHmgyXH3BWYBh0l6HpgMvCKv2xqYVpSL7kv6WS/XbUnSnsD2pEC5Rd5nBuld7fZ5m88Am+Rdvmv7BUkXAefmZR8GVszjALjU9v/2+8MJIYTQMeM+oAKz66UoLbadUy91AXpLXRrMXmPb364fO9e3fjQv2xa43/Z1jU6YG93fVC99yQ0bLsubPQs8kbd/IWcdP1OM56oGYwshhDCMJkJAHYq2S11a2Kdqop+7KG1UW3+r7VltHGexpEm2l5DueK8d6ECibCaEELpnIgTUnYtZZlp1OVpGm6UuZakKpC5F5TH2A66pvtu+uN3zN3ADadLy60hdlcqymC2La7zb9q2NDhBlMyGE0D0TIaB2s9RlmVKV8nFybsiwWRvTtbXF9qOS9pG0NvAUsGGx+v7+ZswJIYTQXZHl271Sl3cDzaaSG6ylpLKZazp83BBCCEM0Lu9Qa5m90ySVCUXzJL0bmJHvLo8AJueylqqJ/T2SpkmaYnt+cdzleuZW/XZrmb1TgLc3u2usZfY+SV9AXyTpY6Rp2tYl/f1cCxwoaQ5wC3CE7QslfY4U+AHeVcxAsyZwqu3nBvOzCyGEMDjjMqBSZPY2mM/7AuD7wDaSXgJmFdvOBw4kZfaeBXyQ5hOLLyPPRjM9B9cfAb+vzVhzju3FedvlMnvzZ0glL9fmLN8t8rIXgHVt3y/p+Jzl+0J5evoSqJ4Bjga+1864QwghdMZ4Dai9coA7svi+VNIvKGaFqW17VP68kBbB1Pa1sGzALu6Cb60yewcwzmWCaL4Lru6Ep9OX5fuCpLcBpxS7n2/7jOpLs9KgyPINIYTuGa8BtWOZvbVSl+2ATSTdDjyQl7XM7C2WVzPWlLYDflxbtn/eFuBy28/kz62yfMvzbEdqTrGcyPINIYTuGa8BtWOZvWWpS7N3qMXnppm91Yw1ywyi7zFv6arq7re2f6ss322qO2vgKdsXNjhuCCGELhqvAbU/U0kJPpAzeyXNJLf6G4JuZPaWqizfy4H3FcvviU5JIYQwsiZK2UzXm9hLWg94yfbz/W48eLcAu9p+uYvnCCGEMAjj/g41l9DcBnwzZ/WuTMryrWwvafP8GHdj4HuSbqW95vhbke4aAT5DenxcBeRXAQ+RplqbBJxUZfk2Od6XSJm6B0r6FGmqtoeAK0jlPCsBKwFX5V12k3Sh7afz/j+y/cn8eTtgnZxNHEIIYRiMy4Bae/xZldCcCr11o78v1l9WfH7E9n9VXxo0x6+/21wNOD2v+7d87DMkbQM8a/uifJy1SCU4ZWZu/XhVY/5vV+e2fb6kTwAfyVnHSDpa0h+BbwC7AVeSguymRd3sq4Hf9PuDCiGE0DHjMqAOVZHZu6ek6g60URP7y4CDgXoDh31sn1zL7H29pBUA2iypWSRpDeCJKphmZwLvyYF7/7xsN+BEYC/SHe3Ktl9qcF1RNhNCCF0yEQLqgEtobF+cS2gW9tPPdzHwtKT1bc8tli/Jx+nN7JX0JHCN7Xn9nb8o39kauKs2tpdzNjH0PW5eyfacIsAupYEomwkhhO6ZCAG1m83xsX1F7oh0Rrm4waZqsrzpuSXt0uy0+c+qZrb3GnILwqbvakMIIXTHRMnybaUTzfEflLRl8b3RLyrr9tNft9G576NWyiNpVfoC5hM5Aam6O34B2InUCziEEMIwmogBteMlNLZvIL2/rFwj6ZDqS27G0N/cqsudO5fgrCtplWKT99OXcDQDOAaokqx+DxwG/Lmdc4UQQuicifDIt+4C4LOSngcmAzc22W5AzfGBO0glN9Xj19fkNoRrkVoMnpy7Kl1TdloqvEHSz20bOA/4FfC3wM+B4yXdB7xIKvs5VJJJvxCtSprlZmPg9cAmwBGSmp0nhBBCFyj9/zt0QjWVW/68JvBm2+eWy1vsOw14PE8d9wZgZ9s/yeuOsP0/+f2vq/pSSZNJzSSW1s/fn56eHs+YMWPQ1xpCCBORpJm2exqtm4h3qANSa45faVRCswzbz0larXasKaRHsnXnALeSSnDuAdYnTf+2ne276Mva3dH2ycU5XljuSK2vJcpmQgihSyKg9qNsjj8Q+Y7zD7VjzafFI+SccAQpa3c2qTdwGVCHlL0bZTMhhNA9EVA7a9fiHeoDtqcPcP8lucZ0ie0lklbMNalz6xtKejuwLnCT7TuGNuwQQghDFQG1s2a3+w6zicXALsCs4vuupGxeKP6+bF9QTkgeQghhZI3bgCrpw9X7xhx4DrX9zfz9A8DZwBGkrFkDz9g+L6+v5jhdGXglcLXt62pJR6sBf2/7uy3GsA6pzOU1klYGbrP9+2bHB+4EDrL9rbz+YWBfYCtJi0jznr7W9i2SPge8F1hVUtV9acM8L+q7ionJQwghDINxG1CBBZJWzT1tdyEFp4qAdwK/tf1XAEm7SdonB7ZlGuznJvnX1Y7/CeDH/YzhCOBHwBG2T8u9eWlx/DuADxX7zwA+aPvrebv3koLza4BnSM32zyUF0FMGkuUbQgihs8ZzQL2VFEhvJk179oKk1XMTh6XAWlUwBbB9q6QPs3zghDStWi9JRwPn2X6xXF4LktsDM2wvIXU/osVcqYvy+iXAF4vjLSIF7sqdwKR6hrGkjSTt0UZpTmT5hhBCl4znTkn3kJrLQ7ojvQnYKz96fZHGGbPLdTOSNAlYo/i+L+m9Zn+PVHcA/tTgeBsC+0g6Jv/zEeDA/i8HSHOs9rYVlLRqfnz8E2AdSbu12tn2z2z32O6ZOnVqm6cMIYTQjnEbUHPHoaWSNiA1TJhLqu/8G9KE443KRnqXSTpM0ueB99E3J+rawIbAl4DD2x2LpK3z8Y7OM9BcB8wndVF6kdQ+sL9jrASsUt0VS9odeC1pOrfJti8BnpX0RkmvaHdsIYQQOmPcBtRsCdBDX6/bxcDmtu8jPQau612WG9X/EFizmFt0vu1z8vfnJLW6zfsL6Y4S2/fm4/VOq9bk+K0cSXpfWu0/0/b1+bHwnnnZfbavjoSkEEIYfuM9oC4A1rD9cv7+En13oc9I6n2RKKmH9I6yV57Y+7biUWr5mPhc4NBmJ7Z9J9BTTSreZJv68RuS9B7guoF2RgohhDB8xnNSEsBM4Kja90MBbP9K0ofyO1UBT9o+v34A27+T9FFJs2vLF0uaI2mTMrmp5kzgU5IWkO6Wl2tWXx6/6slbknQEaUq2VSS9FrgXWAgcX9vuH4qvs21/rsmYQgghdEE0x5+gojl+CCEMXDTH7yJJ2wL71BbPz+9IB3Kc1wD1R7+PDbaXcAghhOEVAXWIbN8N3N2B48yir+VgCCGEMWa8JyWFEEIIwyICagghhNABEVBDCCGEDoiAGkIIIXRAlM1MUJKep9bIYgxbD3hypAfRIXEto1Ncy+g0Eteyue2GXfIiy3fiurNZLdVYI2lGXMvoE9cyOsW1dE888g0hhBA6IAJqCCGE0AERUCeun430ADoormV0imsZneJauiSSkkIIIYQOiDvUEEIIoQMioIYQQggdEAE1hBBC6ICoQ50AJB0FGJgM/NT5xbmkLYB3AC8BN+cZb0a1FteyOvAvwHO2/9/IjbB9La7lLcDUvHyW7ZtHbJBtanEtfwesmzd7zPblIzPC9jW7lmL9u4EnbV87AsMbkBZ/Lx8GluTN5tq+ZGRG2L4W17ICcCzwMrB6Xrek2XG6KQLqOCdpS+Bx25dI2gl4PXB9Xn2w7e/m7T7GKJ8+rtW12F4A/KukI0dyjO3q5+/lz9X/4CT9EzCqA2o/13JJ9T83SZ8ERnVA7edakLQGsAvw2xEaYtv6uZYXbJ89cqMbmH6u5e3Ar20/NmIDzOKR7/g3jfwfv+07gG2LdS8Vn1/Mv+mNZq2uZaxpei22Hyi2e3x4hzUora6lCqYrA0+NyOgGpr9/x44EzhruQQ1Sq2vZQNJ7JX1M0kYjMrqBaXUtrxgNwRTiDnUimGR7YfF9SZPPc0mP5p4YllENTqtrGWvavZZJwzGYIWp5LZIOBw4GPjasoxqcptciaRfgj8ALwz6qwWn193Ku7cfyL9H/CHxjeIc2YK2uxfkx/CrAg7anD+/Q+oz2O5IwfER6PxFGCUl7M8of97bD9lnAMcDhIz2WwZIkYC/b14z0WDqhuqOzvRS4L+cgjFU9wG9tnwnsLGmtkRpIBNTxb0l+3FYp73jKJxRTgaeHZ0iD1upaxpqW1yJpbWAb238a3mENSr9/L/nu4jFJaw7fsAal2bW8mhRXDwPeBuwvaZNhH93AtPvfy0JG/9PKVtcy3faz+fMMYLvhG9ayIqCOfzcAbwKQ9Crg7mLdKsXnyfm31dGs1bWMNU2vRdJqwIeA/xmZoQ1Yw2uRtLKkzYvt/gZYMPzDG5CG12L7Nts/sX0OcCFwle2/jtww29Ls7+UVktYrttvQ9rwRGN9AtPpvf2GR/7ET8PAwj61XtB6cACQdTXqcuzrwY+AY2yfmspl30lc2c+uIDbJNLa5lN2BHYB/gOuAc24tHbqT9a3EtZ5KyYRflTS+3PZrfbbe6lkNJv7itwNgpm2l4LcX6zYEtxkjZzHLXApxMSq5aTPq7mWF79ogNsk0t/h1bHXg/8CLwsu1fjNgYI6CGEEIIQxePfEMIIYQOiIAaQgghdEAE1BBCCKEDIqCGEEIIHRABNYQQQuiACKghhBBCB0RADSGMaZIOlzSty+fYXNK+DZbvW2teESawCKghjDPDNYWdpLVGOphI2gG4uxMN0SW9owNDChNYBNQQwmCtDWwxwmPYgA7NkGT7fztxnDBxjfaGyCGEQcpt/54FNgbWAS4DXgPsDHzb9uOSPkiaaUh5m9NtPylpU1JbyueBlW3/dz7mB4DVgHtJDeOnSlrd9sV53QrA+sD/2r43j2EhaWrArWz/az7Oq4D98/Gfsn2hpG2BPYENgftt/7J2PR8ltWNcE/iV7YdJ/V2fkvRr2/flBuqH2z4t7/PGPNZtgVfmsT9o+7L8CHctYCNS3+T32D5N0utIbSwnAfNtn5uHsKekzfIx7rd9RW18Lccfxr8IqCGMX6uR+rReLulgYGfbp0tag9T79L+BKcDPbS/IDcY/A3wHeJvt7wNI2krSm21fCuwGfNH2Ukn3sWxP2zOde5lKOoIUyDYAzrb9hKS3SNopTxC9v+0f1Ma7n+0T8v7/JGkl24vy97cAV9q+L3//BKmf65XAA7YfhDSrjaRyJpJNbF8t6eHa2CorFL8sVMtusf37BtveWwVJSV8AlgmorcYfJoYIqCGMY1UAAv4CbJqXPS+pmqz5BdsL8vKlkqoAML88hqTX56+3t5iVaCVJBwBrkO4GAZ4rGvvfCWyaA/oj5Y552Y7F+1+R7kSfyt+n2r6k2GU+zT0qaX3So+Al+Rqc55fdGNiVvpl8ZtV3ztvuSpoGbFqxbflo+RFJ6w5g/GECiIAawsSwpPa9WVB8Lv+pJusbkrQq8BHS3e5zTRKjqjGoyflvyZORNzzFAIZzFfB24K/AjXl8HyHN2vM7SZNb7SzpfcAfbJ+bp9JrZBFplqZSq/GHCSCSkkKY2Hofj+a7rOoOdXKxfHNgboN95xfbbUWaAvC5/Mh17WYntP0c6T1juex5YMsW45xbyyhuGhTzZOYrkh5H358X1t24ZgAAAOpJREFUL7b9UP68XuM9e61aTOxebls+Sl6vurNvc/xhAog71BAmtlUlHQO8THqfenJeflF+T/k8KcCcUN/R9lOStpb0TtvnS/qUpO1Id5P9TSR+Y04yegFYmBN/LpD0WdJjUtvunWDd9iWSjpX0EulR6oX9HP8plg3aL+T3oSLNAdrK3OLd6brF8v0kbUSaj7Mq05lLmjj9wVbjDxNDzIcawgQm6cgqIzaEMDTxyDeEEELogAioIYQQQgfEI98QQgihA+IONYQQQuiACKghhBBCB0RADSGEEDogAmoIIYTQARFQQwghhA74/wHP9HxAPPXNqgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_importance.sort_values(\"Importance\", ascending=True, inplace=True)\n",
    "coordinates = range(len(df_importance))\n",
    "plt.barh(y=coordinates, width = df_importance[\"Importance\"])\n",
    "plt.yticks(coordinates, df_importance[\"Feature\"])\n",
    "plt.xlabel(\"Importance of variable\")\n",
    "plt.ylabel(\"Variable\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.3 Gradient Boosting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "\n",
    "from sklearn.tree import export_graphviz\n",
    "import graphviz\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy on training set: 1.000\n",
      "Accuracy on test set: 0.972\n",
      "Confusion matrix: \n",
      "[[144   0]\n",
      " [  6  65]]\n"
     ]
    }
   ],
   "source": [
    "gb_uncustomized = GradientBoostingClassifier(random_state=1234)\n",
    "gb_uncustomized.fit(df_train_x, df_train_y)\n",
    "\n",
    "y_pred = gb_uncustomized.predict(df_test_x)\n",
    "\n",
    "print(\"Accuracy on training set: {:.3f}\".format(gb_uncustomized.score(df_train_x, df_train_y)))\n",
    "print(\"Accuracy on test set: {:.3f}\".format(gb_uncustomized.score(df_test_x, df_test_y)))\n",
    "print(\"Confusion matrix: \\n{}\".format(confusion_matrix(df_test_y, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>ROLLING_TEMP_T5</td>\n",
       "      <td>0.580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>FUR_SZ_TEMP</td>\n",
       "      <td>0.120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>HSB_적용</td>\n",
       "      <td>0.095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>HSB_미적용</td>\n",
       "      <td>0.084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>ROLLING_DESCALING</td>\n",
       "      <td>0.051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PT_THK</td>\n",
       "      <td>0.041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PT_WDTH</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>FUR_HZ_TEMP</td>\n",
       "      <td>0.008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>FUR_SZ_TIME</td>\n",
       "      <td>0.004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>WORK_GR_1조</td>\n",
       "      <td>0.002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>FUR_TIME</td>\n",
       "      <td>0.002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PT_WGT</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>WORK_GR_4조</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>FUR_HZ_TIME</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>FUR_NO_2호기</td>\n",
       "      <td>0.001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>FUR_NO_3호기</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PT_LTH</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FUR_NO_ROW</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>FUR_NO_1호기</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>STEEL_KIND_T8</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>WORK_GR_2조</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>STEEL_KIND_T0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>STEEL_KIND_T7</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>WORK_GR_3조</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>STEEL_KIND_C3</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>STEEL_KIND_T5</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>STEEL_KIND_T3</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>STEEL_KIND_T1</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>STEEL_KIND_C0</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>STEEL_KIND_C1</td>\n",
       "      <td>0.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Feature  Importance\n",
       "10    ROLLING_TEMP_T5       0.580\n",
       "7         FUR_SZ_TEMP       0.120\n",
       "25             HSB_적용       0.095\n",
       "24            HSB_미적용       0.084\n",
       "11  ROLLING_DESCALING       0.051\n",
       "0              PT_THK       0.041\n",
       "1             PT_WDTH       0.008\n",
       "5         FUR_HZ_TEMP       0.008\n",
       "8         FUR_SZ_TIME       0.004\n",
       "26         WORK_GR_1조       0.002\n",
       "9            FUR_TIME       0.002\n",
       "3              PT_WGT       0.001\n",
       "29         WORK_GR_4조       0.001\n",
       "6         FUR_HZ_TIME       0.001\n",
       "22         FUR_NO_2호기       0.001\n",
       "23         FUR_NO_3호기       0.000\n",
       "2              PT_LTH       0.000\n",
       "4          FUR_NO_ROW       0.000\n",
       "21         FUR_NO_1호기       0.000\n",
       "20      STEEL_KIND_T8       0.000\n",
       "27         WORK_GR_2조       0.000\n",
       "15      STEEL_KIND_T0       0.000\n",
       "19      STEEL_KIND_T7       0.000\n",
       "28         WORK_GR_3조       0.000\n",
       "14      STEEL_KIND_C3       0.000\n",
       "18      STEEL_KIND_T5       0.000\n",
       "17      STEEL_KIND_T3       0.000\n",
       "16      STEEL_KIND_T1       0.000\n",
       "12      STEEL_KIND_C0       0.000\n",
       "13      STEEL_KIND_C1       0.000"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_importance = pd.DataFrame()\n",
    "df_importance['Feature'] = v_feature_name\n",
    "df_importance['Importance'] = gb_uncustomized.feature_importances_\n",
    "\n",
    "df_importance.sort_values(\"Importance\", ascending=False, inplace=True)\n",
    "df_importance.round(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Variable')"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_importance.sort_values(\"Importance\", ascending=True, inplace=True)\n",
    "coordinates = range(len(df_importance))\n",
    "plt.barh(y=coordinates, width = df_importance[\"Importance\"])\n",
    "plt.yticks(coordinates, df_importance[\"Feature\"])\n",
    "plt.xlabel(\"Importance of variable\")\n",
    "plt.ylabel(\"Variable\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
